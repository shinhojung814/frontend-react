{"ast":null,"code":"import Camera from \"./Camera\";\nimport Wanderer from \"../creature/Wanderer\";\nimport { FRAME_PER_SEC } from \"../lib/Constants\";\n\nclass RoomClient {\n  constructor(roomId) {\n    this.syncFieldState = socketState => {\n      const monsterLength = Object.keys(socketState.monsters).length;\n      console.log(\"[socket] syncFieldState:\", socketState);\n\n      if (monsterLength <= 0) {\n        console.error(\"ERROR!! zero monster issue should be fixed!!\");\n        return;\n      } // monster를 하나씩 업데이트\n\n\n      for (let monId in socketState.monsters) {\n        // socket에서 받아온 monster plain object\n        const monPlain = socketState.monsters[monId]; // 해당 monster가 없는 경우 object 생성해 추가\n\n        if (!(monId in this.fieldState.monsters)) {\n          const monster = new Wanderer({\n            userId: monPlain.userId,\n            monId: monPlain.monId\n          });\n          monster.overwrite(monPlain);\n          this.fieldState.monsters[monId] = monster;\n        } // 기존에 있던 경우 일부만 변경\n        else {\n            this.fieldState.monsters[monId].sync(monPlain);\n          }\n      } // this.fieldState = socketState;\n\n    };\n\n    // console.log(\"Room init\", roomId);\n    this.roomId = roomId;\n    this.camera = new Camera();\n    this.initFieldState();\n    this.interval = undefined;\n  }\n\n  initFieldState() {\n    // TODO: 서버에서 해당 어항에 포함된 몬스터들을 가져오기\n    const state = {\n      monsters: {}\n    };\n    this.fieldState = state;\n  }\n\n  updateGameState() {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.run();\n    }\n  }\n\n  start() {\n    console.log(\"[room] start\", this.roomId);\n    this.interval = setInterval(() => this.updateGameState(), 1000 / FRAME_PER_SEC);\n  }\n\n  close() {\n    console.log(\"[room] close\", this.roomId);\n    clearInterval(this.interval);\n  }\n\n}\n\nexport default RoomClient;","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/shared/room/RoomClient.js"],"names":["Camera","Wanderer","FRAME_PER_SEC","RoomClient","constructor","roomId","syncFieldState","socketState","monsterLength","Object","keys","monsters","length","console","log","error","monId","monPlain","fieldState","monster","userId","overwrite","sync","camera","initFieldState","interval","undefined","state","updateGameState","mon","run","start","setInterval","close","clearInterval"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAEA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAAA,SAgBpBC,cAhBoB,GAgBFC,WAAD,IAAiB;AAChC,YAAMC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAW,CAACI,QAAxB,EAAkCC,MAAxD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCP,WAAxC;;AACA,UAAIC,aAAa,IAAI,CAArB,EAAwB;AACtBK,QAAAA,OAAO,CAACE,KAAR,CAAc,8CAAd;AACA;AACD,OAN+B,CAOhC;;;AACA,WAAK,IAAIC,KAAT,IAAkBT,WAAW,CAACI,QAA9B,EAAwC;AACtC;AACA,cAAMM,QAAQ,GAAGV,WAAW,CAACI,QAAZ,CAAqBK,KAArB,CAAjB,CAFsC,CAGtC;;AACA,YAAI,EAAEA,KAAK,IAAI,KAAKE,UAAL,CAAgBP,QAA3B,CAAJ,EAA0C;AACxC,gBAAMQ,OAAO,GAAG,IAAIlB,QAAJ,CAAa;AAC3BmB,YAAAA,MAAM,EAAEH,QAAQ,CAACG,MADU;AAE3BJ,YAAAA,KAAK,EAAEC,QAAQ,CAACD;AAFW,WAAb,CAAhB;AAIAG,UAAAA,OAAO,CAACE,SAAR,CAAkBJ,QAAlB;AACA,eAAKC,UAAL,CAAgBP,QAAhB,CAAyBK,KAAzB,IAAkCG,OAAlC;AACD,SAPD,CAQA;AARA,aASK;AACH,iBAAKD,UAAL,CAAgBP,QAAhB,CAAyBK,KAAzB,EAAgCM,IAAhC,CAAqCL,QAArC;AACD;AACF,OAxB+B,CAyBhC;;AACD,KA1CmB;;AAClB;AACA,SAAKZ,MAAL,GAAcA,MAAd;AACA,SAAKkB,MAAL,GAAc,IAAIvB,MAAJ,EAAd;AACA,SAAKwB,cAAL;AACA,SAAKC,QAAL,GAAgBC,SAAhB;AACD;;AAEDF,EAAAA,cAAc,GAAG;AACf;AACA,UAAMG,KAAK,GAAG;AACZhB,MAAAA,QAAQ,EAAE;AADE,KAAd;AAGA,SAAKO,UAAL,GAAkBS,KAAlB;AACD;;AA8BDC,EAAAA,eAAe,GAAG;AAChB,SAAK,IAAIZ,KAAT,IAAkB,KAAKE,UAAL,CAAgBP,QAAlC,EAA4C;AAC1C,UAAIkB,GAAG,GAAG,KAAKX,UAAL,CAAgBP,QAAhB,CAAyBK,KAAzB,CAAV;AACAa,MAAAA,GAAG,CAACC,GAAJ;AACD;AACF;;AAEDC,EAAAA,KAAK,GAAG;AACNlB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKT,MAAjC;AACA,SAAKoB,QAAL,GAAgBO,WAAW,CACzB,MAAM,KAAKJ,eAAL,EADmB,EAEzB,OAAO1B,aAFkB,CAA3B;AAID;;AAED+B,EAAAA,KAAK,GAAG;AACNpB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKT,MAAjC;AACA6B,IAAAA,aAAa,CAAC,KAAKT,QAAN,CAAb;AACD;;AA/Dc;;AAkEjB,eAAetB,UAAf","sourcesContent":["import Camera from \"./Camera\";\nimport Wanderer from \"../creature/Wanderer\";\nimport { FRAME_PER_SEC } from \"../lib/Constants\";\n\nclass RoomClient {\n  constructor(roomId) {\n    // console.log(\"Room init\", roomId);\n    this.roomId = roomId;\n    this.camera = new Camera();\n    this.initFieldState();\n    this.interval = undefined;\n  }\n\n  initFieldState() {\n    // TODO: 서버에서 해당 어항에 포함된 몬스터들을 가져오기\n    const state = {\n      monsters: {},\n    };\n    this.fieldState = state;\n  }\n\n  syncFieldState = (socketState) => {\n    const monsterLength = Object.keys(socketState.monsters).length;\n    console.log(\"[socket] syncFieldState:\", socketState);\n    if (monsterLength <= 0) {\n      console.error(\"ERROR!! zero monster issue should be fixed!!\");\n      return;\n    }\n    // monster를 하나씩 업데이트\n    for (let monId in socketState.monsters) {\n      // socket에서 받아온 monster plain object\n      const monPlain = socketState.monsters[monId];\n      // 해당 monster가 없는 경우 object 생성해 추가\n      if (!(monId in this.fieldState.monsters)) {\n        const monster = new Wanderer({\n          userId: monPlain.userId,\n          monId: monPlain.monId,\n        });\n        monster.overwrite(monPlain);\n        this.fieldState.monsters[monId] = monster;\n      }\n      // 기존에 있던 경우 일부만 변경\n      else {\n        this.fieldState.monsters[monId].sync(monPlain);\n      }\n    }\n    // this.fieldState = socketState;\n  };\n\n  updateGameState() {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.run();\n    }\n  }\n\n  start() {\n    console.log(\"[room] start\", this.roomId);\n    this.interval = setInterval(\n      () => this.updateGameState(),\n      1000 / FRAME_PER_SEC\n    );\n  }\n\n  close() {\n    console.log(\"[room] close\", this.roomId);\n    clearInterval(this.interval);\n  }\n}\n\nexport default RoomClient;\n"]},"metadata":{},"sourceType":"module"}