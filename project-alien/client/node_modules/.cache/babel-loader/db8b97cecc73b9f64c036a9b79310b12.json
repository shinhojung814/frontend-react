{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChallengeRoom(props) {\n  _s();\n\n  // 챌린지 정보 가져오기\n  let params = useParams();\n  const roomId = `challenge-${params.challengeId}`;\n  const {\n    rooms,\n    setRoomInfo\n  } = props;\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.post(\"/user/aquarium/challenge\", {\n          challenge_id: params.challengeId\n        }); // console.log(\"fetch challenge data\", res.data.Alien);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.Alien;\n          if (!rooms.current) rooms.current = {};\n          rooms.current[roomId] = new Room(roomId);\n          rooms.current[roomId].initMonsters(aliens);\n          socket.initAndJoin(roomId); // socket.subscribe(rooms.current[roomId].syncFieldState);\n\n          rooms.current[roomId].start(); // TODO: redux\n\n          setRoomInfo({\n            roomId,\n            aliens\n          });\n        } else {}\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      socket.disconnect();\n      rooms.current[roomId].close();\n    }; //   }, []);\n  }, [rooms, setRoomInfo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n} // 주의! 아직 지우지 말기! 챌린지 리스트 그릴 때 소켓 방식 활용해야 함\n// useEffect(() => {\n//   // rooms가 생성되었는지 확인\n//   if (!rooms.current || !currRoomId) return;\n//   // 해당 room에 조인\n//   console.log(\"set currRoomId\", currRoomId);\n//   // socket.initAndJoin(currRoomId);\n//   // socket.subscribe(rooms.current[currRoomId].syncFieldState);\n//   // room의 update logic start\n//   rooms.current[currRoomId].start();\n//   return () => {\n//     // socket.disconnect();\n//     rooms.current[currRoomId].close();\n//   };\n// }, [currRoomId]);\n\n_s(ChallengeRoom, \"oVl/CosACDqoQXSsHMBk26cu/Mw=\", false, function () {\n  return [useParams];\n});\n\n_c = ChallengeRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js"],"names":["React","useEffect","Room","useParams","api","socket","ChallengeRoom","props","params","roomId","challengeId","rooms","setRoomInfo","fetchData","res","post","challenge_id","data","result","aliens","Alien","current","initMonsters","initAndJoin","start","err","console","error","disconnect","close"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC3C;AACA,MAAIC,MAAM,GAAGL,SAAS,EAAtB;AACA,QAAMM,MAAM,GAAI,aAAYD,MAAM,CAACE,WAAY,EAA/C;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAyBL,KAA/B;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF,YAAMY,SAAS,GAAG,YAAY;AAC5B,cAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,IAAJ,CAAS,0BAAT,EAAqC;AACrDC,UAAAA,YAAY,EAAER,MAAM,CAACE;AADgC,SAArC,CAAlB,CAD4B,CAI5B;;AACA,YAAII,GAAG,CAACG,IAAJ,CAASC,MAAT,KAAoB,SAAxB,EAAmC;AACjC;AACA,gBAAMC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAASG,KAAxB;AACA,cAAI,CAACT,KAAK,CAACU,OAAX,EAAoBV,KAAK,CAACU,OAAN,GAAgB,EAAhB;AACpBV,UAAAA,KAAK,CAACU,OAAN,CAAcZ,MAAd,IAAwB,IAAIP,IAAJ,CAASO,MAAT,CAAxB;AACAE,UAAAA,KAAK,CAACU,OAAN,CAAcZ,MAAd,EAAsBa,YAAtB,CAAmCH,MAAnC;AACAd,UAAAA,MAAM,CAACkB,WAAP,CAAmBd,MAAnB,EANiC,CAOjC;;AACAE,UAAAA,KAAK,CAACU,OAAN,CAAcZ,MAAd,EAAsBe,KAAtB,GARiC,CASjC;;AACAZ,UAAAA,WAAW,CAAC;AAAEH,YAAAA,MAAF;AAAUU,YAAAA;AAAV,WAAD,CAAX;AACD,SAXD,MAWO,CACN;AACF,OAlBD;;AAmBAN,MAAAA,SAAS;AACV,KArBD,CAqBE,OAAOY,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACD;;AACD,WAAO,MAAM;AACXpB,MAAAA,MAAM,CAACuB,UAAP;AACAjB,MAAAA,KAAK,CAACU,OAAN,CAAcZ,MAAd,EAAsBoB,KAAtB;AACD,KAHD,CAzBc,CA6Bd;AACD,GA9BQ,EA8BN,CAAClB,KAAD,EAAQC,WAAR,CA9BM,CAAT;AAgCA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;GAxDwBN,a;UAETH,S;;;KAFSG,a","sourcesContent":["import React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\n\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\n\nexport default function ChallengeRoom(props) {\n  // 챌린지 정보 가져오기\n  let params = useParams();\n  const roomId = `challenge-${params.challengeId}`;\n  const { rooms, setRoomInfo } = props;\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.post(\"/user/aquarium/challenge\", {\n          challenge_id: params.challengeId,\n        });\n        // console.log(\"fetch challenge data\", res.data.Alien);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.Alien;\n          if (!rooms.current) rooms.current = {};\n          rooms.current[roomId] = new Room(roomId);\n          rooms.current[roomId].initMonsters(aliens);\n          socket.initAndJoin(roomId);\n          // socket.subscribe(rooms.current[roomId].syncFieldState);\n          rooms.current[roomId].start();\n          // TODO: redux\n          setRoomInfo({ roomId, aliens });\n        } else {\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      socket.disconnect();\n      rooms.current[roomId].close();\n    };\n    //   }, []);\n  }, [rooms, setRoomInfo]);\n\n  return <div></div>;\n}\n\n// 주의! 아직 지우지 말기! 챌린지 리스트 그릴 때 소켓 방식 활용해야 함\n// useEffect(() => {\n//   // rooms가 생성되었는지 확인\n//   if (!rooms.current || !currRoomId) return;\n\n//   // 해당 room에 조인\n//   console.log(\"set currRoomId\", currRoomId);\n//   // socket.initAndJoin(currRoomId);\n//   // socket.subscribe(rooms.current[currRoomId].syncFieldState);\n//   // room의 update logic start\n//   rooms.current[currRoomId].start();\n\n//   return () => {\n//     // socket.disconnect();\n//     rooms.current[currRoomId].close();\n//   };\n// }, [currRoomId]);\n"]},"metadata":{},"sourceType":"module"}