{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js\";\nimport React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\"; // import * as socket from \"../../../apis/socket\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Field extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.draw = (ctx, frameCnt, mouseObj) => {\n      // console.log(mouseObj);\n      let cvsWidth = ctx.canvas.width;\n      let cvsHeight = ctx.canvas.height;\n      ctx.save();\n      ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n      if (this.props.room && this.props.room.fieldState) {\n        const room = this.props.room;\n        const {\n          monsters\n        } = room.fieldState; // console.log(111, this.props.room.usersOnRoom);\n        // draw background\n        // ctx.fillStyle = `rgba(255, 255, 255, 1)`;\n\n        ctx.fillStyle = `rgba(3, 33, 74, 1)`;\n        ctx.fillRect(0, 0, cvsWidth, cvsHeight); // translate location\n\n        const {\n          center\n        } = room.camera;\n        ctx.translate(cvsWidth / 2 - center.x, cvsHeight / 2 - center.y); // room.camera.center.x++;\n        // draw monster\n        // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n\n        for (const monId in monsters) {\n          let {\n            location,\n            size,\n            color,\n            isUserOnRoom\n          } = monsters[monId];\n          let x = room.camera.getCanvasSize(location.x);\n          let y = room.camera.getCanvasSize(location.y);\n          size = room.camera.getCanvasSize(size);\n          ctx.beginPath();\n          ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n          ctx.fillStyle = color;\n\n          if (isUserOnRoom && frameCnt % 100 <= 40) {\n            ctx.fillStyle = \"tomato\";\n          }\n\n          ctx.fill(); // if (isUserOnRoom) {\n          //   ctx.beginPath();\n          //   ctx.arc(x, y, 8, 0, Math.PI * 2);\n          //   ctx.fillStyle = \"tomato\";\n          //   ctx.fill();\n          // }\n        }\n\n        if (mouseObj.clicked) {// let destination = {\n          //   x: mouseObj.deltaXfromCenter,\n          //   y: mouseObj.deltaYfromCenter,\n          // };\n          // destination = room.camera.getLocalFromMouse(destination);\n          // socket.changeDestination(room.roomId, destination);\n        }\n      }\n\n      ctx.restore();\n    };\n  }\n\n  render() {\n    if (this.props.room) {\n      const camera = this.props.room.camera;\n      return /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.draw,\n        onMouseDown: camera.onMouseDown,\n        onMouseMove: camera.onMouseMove,\n        onMouseUp: camera.onMouseUp,\n        onTouchStart: camera.onTouchStart,\n        onTouchMove: camera.onTouchMove,\n        onTouchEnd: camera.onTouchEnd,\n        onWheel: camera.onWheel,\n        onResize: camera.onResize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uB85C\\uB529\\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js"],"names":["React","Component","Canvas","Field","draw","ctx","frameCnt","mouseObj","cvsWidth","canvas","width","cvsHeight","height","save","clearRect","props","room","fieldState","monsters","fillStyle","fillRect","center","camera","translate","x","y","monId","location","size","color","isUserOnRoom","getCanvasSize","beginPath","arc","Math","PI","fill","clicked","restore","render","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onWheel","onResize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C,CAEA;;;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAC3CG,IAD2C,GACpC,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AAClC;AACA,UAAIC,QAAQ,GAAGH,GAAG,CAACI,MAAJ,CAAWC,KAA1B;AACA,UAAIC,SAAS,GAAGN,GAAG,CAACI,MAAJ,CAAWG,MAA3B;AACAP,MAAAA,GAAG,CAACQ,IAAJ;AACAR,MAAAA,GAAG,CAACS,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBN,QAApB,EAA8BG,SAA9B;;AAEA,UAAI,KAAKI,KAAL,CAAWC,IAAX,IAAmB,KAAKD,KAAL,CAAWC,IAAX,CAAgBC,UAAvC,EAAmD;AACjD,cAAMD,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,cAAM;AAAEE,UAAAA;AAAF,YAAeF,IAAI,CAACC,UAA1B,CAFiD,CAGjD;AAEA;AACA;;AACAZ,QAAAA,GAAG,CAACc,SAAJ,GAAiB,oBAAjB;AACAd,QAAAA,GAAG,CAACe,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBZ,QAAnB,EAA6BG,SAA7B,EARiD,CAUjD;;AACA,cAAM;AAAEU,UAAAA;AAAF,YAAaL,IAAI,CAACM,MAAxB;AACAjB,QAAAA,GAAG,CAACkB,SAAJ,CAAcf,QAAQ,GAAG,CAAX,GAAea,MAAM,CAACG,CAApC,EAAuCb,SAAS,GAAG,CAAZ,GAAgBU,MAAM,CAACI,CAA9D,EAZiD,CAajD;AAEA;AACA;;AACA,aAAK,MAAMC,KAAX,IAAoBR,QAApB,EAA8B;AAC5B,cAAI;AAAES,YAAAA,QAAF;AAAYC,YAAAA,IAAZ;AAAkBC,YAAAA,KAAlB;AAAyBC,YAAAA;AAAzB,cAA0CZ,QAAQ,CAACQ,KAAD,CAAtD;AACA,cAAIF,CAAC,GAAGR,IAAI,CAACM,MAAL,CAAYS,aAAZ,CAA0BJ,QAAQ,CAACH,CAAnC,CAAR;AACA,cAAIC,CAAC,GAAGT,IAAI,CAACM,MAAL,CAAYS,aAAZ,CAA0BJ,QAAQ,CAACF,CAAnC,CAAR;AACAG,UAAAA,IAAI,GAAGZ,IAAI,CAACM,MAAL,CAAYS,aAAZ,CAA0BH,IAA1B,CAAP;AAEAvB,UAAAA,GAAG,CAAC2B,SAAJ;AACA3B,UAAAA,GAAG,CAAC4B,GAAJ,CAAQT,CAAR,EAAWC,CAAX,EAAcG,IAAI,GAAG,CAArB,EAAwB,CAAxB,EAA2BM,IAAI,CAACC,EAAL,GAAU,CAArC;AACA9B,UAAAA,GAAG,CAACc,SAAJ,GAAgBU,KAAhB;;AACA,cAAIC,YAAY,IAAIxB,QAAQ,GAAG,GAAX,IAAkB,EAAtC,EAA0C;AACxCD,YAAAA,GAAG,CAACc,SAAJ,GAAgB,QAAhB;AACD;;AACDd,UAAAA,GAAG,CAAC+B,IAAJ,GAZ4B,CAc5B;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,YAAI7B,QAAQ,CAAC8B,OAAb,EAAsB,CACpB;AACA;AACA;AACA;AACA;AACA;AACD;AACF;;AAEDhC,MAAAA,GAAG,CAACiC,OAAJ;AACD,KA1D0C;AAAA;;AA4D3CC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKxB,KAAL,CAAWC,IAAf,EAAqB;AACnB,YAAMM,MAAM,GAAG,KAAKP,KAAL,CAAWC,IAAX,CAAgBM,MAA/B;AACA,0BACE,QAAC,MAAD;AACE,QAAA,IAAI,EAAE,KAAKlB,IADb;AAEE,QAAA,WAAW,EAAEkB,MAAM,CAACkB,WAFtB;AAGE,QAAA,WAAW,EAAElB,MAAM,CAACmB,WAHtB;AAIE,QAAA,SAAS,EAAEnB,MAAM,CAACoB,SAJpB;AAKE,QAAA,YAAY,EAAEpB,MAAM,CAACqB,YALvB;AAME,QAAA,WAAW,EAAErB,MAAM,CAACsB,WANtB;AAOE,QAAA,UAAU,EAAEtB,MAAM,CAACuB,UAPrB;AAQE,QAAA,OAAO,EAAEvB,MAAM,CAACwB,OARlB;AASE,QAAA,QAAQ,EAAExB,MAAM,CAACyB;AATnB;AAAA;AAAA;AAAA;AAAA,cADF;AAaD,KAfD,MAeO;AACL,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACF;;AA/E0C","sourcesContent":["import React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\";\n\n// import * as socket from \"../../../apis/socket\";\n\nexport default class Field extends Component {\n  draw = (ctx, frameCnt, mouseObj) => {\n    // console.log(mouseObj);\n    let cvsWidth = ctx.canvas.width;\n    let cvsHeight = ctx.canvas.height;\n    ctx.save();\n    ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n    if (this.props.room && this.props.room.fieldState) {\n      const room = this.props.room;\n      const { monsters } = room.fieldState;\n      // console.log(111, this.props.room.usersOnRoom);\n\n      // draw background\n      // ctx.fillStyle = `rgba(255, 255, 255, 1)`;\n      ctx.fillStyle = `rgba(3, 33, 74, 1)`;\n      ctx.fillRect(0, 0, cvsWidth, cvsHeight);\n\n      // translate location\n      const { center } = room.camera;\n      ctx.translate(cvsWidth / 2 - center.x, cvsHeight / 2 - center.y);\n      // room.camera.center.x++;\n\n      // draw monster\n      // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n      for (const monId in monsters) {\n        let { location, size, color, isUserOnRoom } = monsters[monId];\n        let x = room.camera.getCanvasSize(location.x);\n        let y = room.camera.getCanvasSize(location.y);\n        size = room.camera.getCanvasSize(size);\n\n        ctx.beginPath();\n        ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        if (isUserOnRoom && frameCnt % 100 <= 40) {\n          ctx.fillStyle = \"tomato\";\n        }\n        ctx.fill();\n\n        // if (isUserOnRoom) {\n        //   ctx.beginPath();\n        //   ctx.arc(x, y, 8, 0, Math.PI * 2);\n        //   ctx.fillStyle = \"tomato\";\n        //   ctx.fill();\n        // }\n      }\n\n      if (mouseObj.clicked) {\n        // let destination = {\n        //   x: mouseObj.deltaXfromCenter,\n        //   y: mouseObj.deltaYfromCenter,\n        // };\n        // destination = room.camera.getLocalFromMouse(destination);\n        // socket.changeDestination(room.roomId, destination);\n      }\n    }\n\n    ctx.restore();\n  };\n\n  render() {\n    if (this.props.room) {\n      const camera = this.props.room.camera;\n      return (\n        <Canvas\n          draw={this.draw}\n          onMouseDown={camera.onMouseDown}\n          onMouseMove={camera.onMouseMove}\n          onMouseUp={camera.onMouseUp}\n          onTouchStart={camera.onTouchStart}\n          onTouchMove={camera.onTouchMove}\n          onTouchEnd={camera.onTouchEnd}\n          onWheel={camera.onWheel}\n          onResize={camera.onResize}\n        />\n      );\n    } else {\n      return <div>로딩중...</div>;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}