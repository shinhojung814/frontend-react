{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/PlazaRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport api from \"../../../apis\";\nimport SearchBox from \"../SearchBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlazaRoom(props) {\n  _s();\n\n  const dispatch = useDispatch(); // 챌린지 정보 가져오기\n\n  const roomId = \"plaza\";\n  const {\n    rooms\n  } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId);\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.get(\"/main\");\n        console.log(\"fetch main data\", res.data);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          console.log(\"plazaroom:\", roomId);\n          const aliens = res.data.aliens;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start(); // TODO: redux\n\n          dispatch(actions.setRoom({\n            roomId: roomId,\n            aliens: aliens,\n            roomTitle: \"외계생물 기르기\"\n          }));\n        } else {}\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      dispatch(actions.setRoom({\n        roomId: null,\n        aliens: []\n      }));\n      rooms.current[roomId].close();\n    }; //   }, []);\n  }, [rooms, roomId, dispatch]);\n  return /*#__PURE__*/_jsxDEV(SearchBox, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n}\n\n_s(PlazaRoom, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = PlazaRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlazaRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/PlazaRoom.js"],"names":["React","useEffect","Room","useDispatch","actions","api","SearchBox","PlazaRoom","props","dispatch","roomId","rooms","current","fetchData","res","get","console","log","data","result","aliens","initMonsters","start","setRoom","roomTitle","err","error","close"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AAEA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACvC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CADuC,CAGvC;;AACA,QAAMO,MAAM,GAAG,OAAf;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYH,KAAlB;AACA,MAAI,CAACG,KAAK,CAACC,OAAX,EAAoBD,KAAK,CAACC,OAAN,GAAgB,EAAhB;AACpB,MAAI,CAACD,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4BC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwB,IAAIR,IAAJ,CAASQ,MAAT,CAAxB;AAE5BT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF,YAAMY,SAAS,GAAG,YAAY;AAC5B,cAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,GAAJ,CAAQ,OAAR,CAAlB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,GAAG,CAACI,IAAnC;;AACA,YAAIJ,GAAG,CAACI,IAAJ,CAASC,MAAT,KAAoB,SAAxB,EAAmC;AACjC;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,MAA1B;AACA,gBAAMU,MAAM,GAAGN,GAAG,CAACI,IAAJ,CAASE,MAAxB;AACAT,UAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBW,YAAtB,CAAmCD,MAAnC;AACAT,UAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBY,KAAtB,GALiC,CAOjC;;AACAb,UAAAA,QAAQ,CACNL,OAAO,CAACmB,OAAR,CAAgB;AACdb,YAAAA,MAAM,EAAEA,MADM;AAEdU,YAAAA,MAAM,EAAEA,MAFM;AAGdI,YAAAA,SAAS,EAAE;AAHG,WAAhB,CADM,CAAR;AAOD,SAfD,MAeO,CACN;AACF,OApBD;;AAqBAX,MAAAA,SAAS;AACV,KAvBD,CAuBE,OAAOY,GAAP,EAAY;AACZT,MAAAA,OAAO,CAACU,KAAR,CAAc,gBAAd,EAAgCD,GAAhC;AACD;;AACD,WAAO,MAAM;AACXhB,MAAAA,QAAQ,CAACL,OAAO,CAACmB,OAAR,CAAgB;AAAEb,QAAAA,MAAM,EAAE,IAAV;AAAgBU,QAAAA,MAAM,EAAE;AAAxB,OAAhB,CAAD,CAAR;AACAT,MAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBiB,KAAtB;AACD,KAHD,CA3Bc,CA+Bd;AACD,GAhCQ,EAgCN,CAAChB,KAAD,EAAQD,MAAR,EAAgBD,QAAhB,CAhCM,CAAT;AAkCA,sBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA5CuBF,S;UACLJ,W;;;KADKI,S","sourcesContent":["import React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\n\nimport api from \"../../../apis\";\n\nimport SearchBox from \"../SearchBox\";\n\nexport default function PlazaRoom(props) {\n  const dispatch = useDispatch();\n\n  // 챌린지 정보 가져오기\n  const roomId = \"plaza\";\n  const { rooms } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId);\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.get(\"/main\");\n        console.log(\"fetch main data\", res.data);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          console.log(\"plazaroom:\", roomId);\n          const aliens = res.data.aliens;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start();\n\n          // TODO: redux\n          dispatch(\n            actions.setRoom({\n              roomId: roomId,\n              aliens: aliens,\n              roomTitle: \"외계생물 기르기\",\n            })\n          );\n        } else {\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      dispatch(actions.setRoom({ roomId: null, aliens: [] }));\n      rooms.current[roomId].close();\n    };\n    //   }, []);\n  }, [rooms, roomId, dispatch]);\n\n  return <SearchBox />;\n}\n"]},"metadata":{},"sourceType":"module"}