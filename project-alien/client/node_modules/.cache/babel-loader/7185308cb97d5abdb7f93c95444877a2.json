{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/SocketContainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as socket from \"../../apis/socket\";\nimport * as actions from \"../../Redux/actions\";\nimport aquarium from \"../../shared\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SocketContainer(props) {\n  _s();\n\n  const {\n    user\n  } = useSelector(({\n    user\n  }) => ({\n    user: user.user\n  }));\n  const dispatch = useDispatch(); // user 정보 중 login, challenges에 변동이 생겼을 때,\n  // 기존 socket을 disconnect하고 새로 생성\n  // (지금은 다른 정보가 바뀔 일이 없으니 user로 통일)\n\n  useEffect(() => {\n    // 1단계: 로그인 상태면 새로 연결\n    if (user.login) {\n      console.log(\"[socket container] step1. login\"); // initiate socket\n\n      socket.init(user); // auth 관련\n\n      socket.onAuthRequest(info => {\n        toast(info.msg); // 생명체 상태 변경: aquarium\n\n        const alien = aquarium.getCurrentRoom().getMonster(info.alienId);\n        if (alien) alien.overwrite({\n          practiceStatus: 1\n        }); // 생명체 상태 변경: redux\n        // TODO: 창 닫는 것 없애야 함\n\n        dispatch(actions.requestAuth(info.alienId));\n      });\n      socket.onAuthApproval(info => {\n        // 본인 생명체에 대한 정보인 경우 toast\n        if (info.receiverId === user.id) {\n          toast(info.msg);\n        } // 생명체 상태 변경: aquarium\n\n\n        const alien = aquarium.getCurrentRoom().getMonster(info.alienId);\n        if (alien) alien.overwrite({\n          practiceStatus: 2\n        }); // 생명체 상태 변경: redux\n\n        dispatch(actions.approveAuth(info.alienId));\n      });\n      dispatch(actions.toggleSocket(true));\n    } // 2단계: 기존 연결된 것이 있으면 연결을 끊는다.\n    // (상태가 변경되거나 새로고침할 때, 창을 닫을 때)\n\n\n    return () => {\n      console.log(\"[socket container] step2. disconnect\");\n      socket.disconnect();\n    };\n  }, [user, dispatch]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SocketContainer, \"///vX1FZ9qMGkeDNJGCfk9B4ZjU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SocketContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketContainer\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/SocketContainer/index.js"],"names":["React","useEffect","useSelector","useDispatch","socket","actions","aquarium","toast","SocketContainer","props","user","dispatch","login","console","log","init","onAuthRequest","info","msg","alien","getCurrentRoom","getMonster","alienId","overwrite","practiceStatus","requestAuth","onAuthApproval","receiverId","id","approveAuth","toggleSocket","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAWR,WAAW,CAAC,CAAC;AAAEQ,IAAAA;AAAF,GAAD,MAAe;AAC1CA,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAD+B,GAAf,CAAD,CAA5B;AAGA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B,CAJ6C,CAM7C;AACA;AACA;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIS,IAAI,CAACE,KAAT,EAAgB;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EADc,CAEd;;AACAV,MAAAA,MAAM,CAACW,IAAP,CAAYL,IAAZ,EAHc,CAId;;AACAN,MAAAA,MAAM,CAACY,aAAP,CAAsBC,IAAD,IAAU;AAC7BV,QAAAA,KAAK,CAACU,IAAI,CAACC,GAAN,CAAL,CAD6B,CAE7B;;AACA,cAAMC,KAAK,GAAGb,QAAQ,CAACc,cAAT,GAA0BC,UAA1B,CAAqCJ,IAAI,CAACK,OAA1C,CAAd;AACA,YAAIH,KAAJ,EAAWA,KAAK,CAACI,SAAN,CAAgB;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAAhB,EAJkB,CAK7B;AACA;;AACAb,QAAAA,QAAQ,CAACN,OAAO,CAACoB,WAAR,CAAoBR,IAAI,CAACK,OAAzB,CAAD,CAAR;AACD,OARD;AASAlB,MAAAA,MAAM,CAACsB,cAAP,CAAuBT,IAAD,IAAU;AAC9B;AACA,YAAIA,IAAI,CAACU,UAAL,KAAoBjB,IAAI,CAACkB,EAA7B,EAAiC;AAC/BrB,UAAAA,KAAK,CAACU,IAAI,CAACC,GAAN,CAAL;AACD,SAJ6B,CAK9B;;;AACA,cAAMC,KAAK,GAAGb,QAAQ,CAACc,cAAT,GAA0BC,UAA1B,CAAqCJ,IAAI,CAACK,OAA1C,CAAd;AACA,YAAIH,KAAJ,EAAWA,KAAK,CAACI,SAAN,CAAgB;AAAEC,UAAAA,cAAc,EAAE;AAAlB,SAAhB,EAPmB,CAQ9B;;AACAb,QAAAA,QAAQ,CAACN,OAAO,CAACwB,WAAR,CAAoBZ,IAAI,CAACK,OAAzB,CAAD,CAAR;AACD,OAVD;AAWAX,MAAAA,QAAQ,CAACN,OAAO,CAACyB,YAAR,CAAqB,IAArB,CAAD,CAAR;AACD,KA5Ba,CA8Bd;AACA;;;AACA,WAAO,MAAM;AACXjB,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAV,MAAAA,MAAM,CAAC2B,UAAP;AACD,KAHD;AAID,GApCQ,EAoCN,CAACrB,IAAD,EAAOC,QAAP,CApCM,CAAT;AAsCA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAhDuBH,e;UACLN,W,EAGAC,W;;;KAJKK,e","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as socket from \"../../apis/socket\";\nimport * as actions from \"../../Redux/actions\";\nimport aquarium from \"../../shared\";\nimport { toast } from \"react-toastify\";\n\nexport default function SocketContainer(props) {\n  const { user } = useSelector(({ user }) => ({\n    user: user.user,\n  }));\n  const dispatch = useDispatch();\n\n  // user 정보 중 login, challenges에 변동이 생겼을 때,\n  // 기존 socket을 disconnect하고 새로 생성\n  // (지금은 다른 정보가 바뀔 일이 없으니 user로 통일)\n  useEffect(() => {\n    // 1단계: 로그인 상태면 새로 연결\n    if (user.login) {\n      console.log(\"[socket container] step1. login\");\n      // initiate socket\n      socket.init(user);\n      // auth 관련\n      socket.onAuthRequest((info) => {\n        toast(info.msg);\n        // 생명체 상태 변경: aquarium\n        const alien = aquarium.getCurrentRoom().getMonster(info.alienId);\n        if (alien) alien.overwrite({ practiceStatus: 1 });\n        // 생명체 상태 변경: redux\n        // TODO: 창 닫는 것 없애야 함\n        dispatch(actions.requestAuth(info.alienId));\n      });\n      socket.onAuthApproval((info) => {\n        // 본인 생명체에 대한 정보인 경우 toast\n        if (info.receiverId === user.id) {\n          toast(info.msg);\n        }\n        // 생명체 상태 변경: aquarium\n        const alien = aquarium.getCurrentRoom().getMonster(info.alienId);\n        if (alien) alien.overwrite({ practiceStatus: 2 });\n        // 생명체 상태 변경: redux\n        dispatch(actions.approveAuth(info.alienId));\n      });\n      dispatch(actions.toggleSocket(true));\n    }\n\n    // 2단계: 기존 연결된 것이 있으면 연결을 끊는다.\n    // (상태가 변경되거나 새로고침할 때, 창을 닫을 때)\n    return () => {\n      console.log(\"[socket container] step2. disconnect\");\n      socket.disconnect();\n    };\n  }, [user, dispatch]);\n\n  return <React.Fragment />;\n}\n"]},"metadata":{},"sourceType":"module"}