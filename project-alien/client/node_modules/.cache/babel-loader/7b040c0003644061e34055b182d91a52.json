{"ast":null,"code":"// TODO: 모두 static method만 사용하도록 설계할지 고민\n// - 클라이언트로부터 정보를 받아 저장하는 등의 상황에서\n// - location, velocity 등이 모두 Vector2D instance로 되어 있다면\n// - 매번 오브젝트에서 벡터로 변환해주는 작업이 필요해질 것\n// - 그러므로 모든 벡터 계산은 static하게 처리하도록 하자\n// static method의 모든 입력값은 {x, y} 의 형태를 띄고 있다고 전제함\n// 계산 결과로 새로운 object를 생성할 것인지 여부 또한 고민\n// 일단.. 첫 번째 인자 값을 변경하는 것으로 통일하며, 첫 번째 인자를 리턴\nclass Vector2D {\n  static add(a, b) {\n    a.x += b.x;\n    a.y += b.y;\n    return a;\n  }\n\n  static sub(a, b) {\n    a.x -= b.x;\n    a.y -= b.y;\n    return a;\n  }\n\n  static mult(a, value) {\n    a.x *= value;\n    a.y *= value;\n    return a;\n  }\n\n  static div(a, value) {\n    a.x /= value;\n    a.y /= value;\n    return a;\n  }\n\n  static dist(a, b) {\n    let dx = a.x - b.x;\n    let dy = a.y - b.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  static clone(a) {\n    return {\n      x: a.x,\n      y: a.y\n    };\n  }\n\n  static equal(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n\n  static dot(a, b) {\n    return a.x * b.x + a.y * b.y;\n  }\n\n  static getMagSq(a) {\n    return this.dot(a, a);\n  }\n\n  static getMag(a) {\n    return Math.sqrt(this.getMagSq(a));\n  }\n\n  static normalize(a) {\n    let m = this.getMag(a);\n\n    if (m === 0) {\n      a.x = 1;\n      a.y = 0;\n      return a;\n    } else {\n      return this.div(a, m);\n    }\n  }\n\n  static setMag(a, v) {\n    // 우선 벡터 a를 normalize한 뒤 v를 곱함\n    return this.mult(this.normalize(a), v);\n  }\n\n  static limit(a, maximum) {\n    // TODO: 벡터 크기를 계산하는 로직이 반복되므로 최적화 가능\n    if (this.getMagSq(a) > maximum * maximum) {\n      this.setMag(a, maximum);\n    }\n\n    return a;\n  }\n\n}\n\nexport default Vector2D;","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/shared/lib/Vector2D.js"],"names":["Vector2D","add","a","b","x","y","sub","mult","value","div","dist","dx","dy","Math","sqrt","clone","equal","dot","getMagSq","getMag","normalize","m","setMag","v","limit","maximum"],"mappings":"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","sourcesContent":["// TODO: 모두 static method만 사용하도록 설계할지 고민\n// - 클라이언트로부터 정보를 받아 저장하는 등의 상황에서\n// - location, velocity 등이 모두 Vector2D instance로 되어 있다면\n// - 매번 오브젝트에서 벡터로 변환해주는 작업이 필요해질 것\n// - 그러므로 모든 벡터 계산은 static하게 처리하도록 하자\n\n// static method의 모든 입력값은 {x, y} 의 형태를 띄고 있다고 전제함\n// 계산 결과로 새로운 object를 생성할 것인지 여부 또한 고민\n// 일단.. 첫 번째 인자 값을 변경하는 것으로 통일하며, 첫 번째 인자를 리턴\n\nclass Vector2D {\n  static add(a, b) {\n    a.x += b.x;\n    a.y += b.y;\n    return a;\n  }\n\n  static sub(a, b) {\n    a.x -= b.x;\n    a.y -= b.y;\n    return a;\n  }\n\n  static mult(a, value) {\n    a.x *= value;\n    a.y *= value;\n    return a;\n  }\n\n  static div(a, value) {\n    a.x /= value;\n    a.y /= value;\n    return a;\n  }\n\n  static dist(a, b) {\n    let dx = a.x - b.x;\n    let dy = a.y - b.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  static clone(a) {\n    return { x: a.x, y: a.y };\n  }\n\n  static equal(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n\n  static dot(a, b) {\n    return a.x * b.x + a.y * b.y;\n  }\n\n  static getMagSq(a) {\n    return this.dot(a, a);\n  }\n\n  static getMag(a) {\n    return Math.sqrt(this.getMagSq(a));\n  }\n\n  static normalize(a) {\n    let m = this.getMag(a);\n    if (m === 0) {\n      a.x = 1;\n      a.y = 0;\n      return a;\n    } else {\n      return this.div(a, m);\n    }\n  }\n\n  static setMag(a, v) {\n    // 우선 벡터 a를 normalize한 뒤 v를 곱함\n    return this.mult(this.normalize(a), v);\n  }\n\n  static limit(a, maximum) {\n    // TODO: 벡터 크기를 계산하는 로직이 반복되므로 최적화 가능\n    if (this.getMagSq(a) > maximum * maximum) {\n      this.setMag(a, maximum);\n    }\n    return a;\n  }\n}\n\nexport default Vector2D;\n"]},"metadata":{},"sourceType":"module"}