{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport aquarium from \"../../../shared\";\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChallengeRoom(props) {\n  _s();\n\n  const dispatch = useDispatch(); // 챌린지 정보 가져오기\n\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const room = aquarium.setCurrentRoom(roomId); // user 정보 확인\n\n  const {\n    user,\n    isSocketOn,\n    aliens\n  } = useSelector(({\n    user,\n    room\n  }) => ({\n    user: user.user,\n    isSocketOn: user.isSocketOn,\n    aliens: room.aliens\n  })); // const userId = user.login && user.id;\n  // 본 챌린지에 참가중인지 확인\n\n  let participating = false;\n  let myAlienId = null;\n\n  if (user.login && user.challenges) {\n    participating = user.challenges.findIndex(c => c.id === Number(challengeId)) !== -1;\n\n    if (participating) {\n      let alien = aliens.find(a => a.user_info_id === Number(user.id));\n      myAlienId = !!alien && alien.id;\n    }\n  } // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        let res = await api.get(`/challenge/${challengeId}`); // console.log(\"fetch challenge data\", res.data);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const challenge = res.data.challenge;\n          const roomTitle = `${challenge.challenge_name}`;\n          aliens.forEach(alien => {\n            alien.practiceDays = [alien.sun, alien.mon, alien.tue, alien.wed, alien.thu, alien.fri, alien.sat];\n            alien.showBubble = true;\n          });\n          room.initMonsters(aliens);\n          room.start(); // update redux room info\n\n          dispatch(actions.setRoom({\n            roomId,\n            aliens,\n            roomTitle,\n            challenge\n          }));\n        } else {\n          return;\n        }\n\n        res = await api.get(`/chat/${challengeId}`);\n\n        if (res.data.result === \"success\") {\n          const messages = res.data.data;\n          dispatch(actions.setMessage(messages));\n        } else {\n          return;\n        }\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      room.close();\n    };\n  }, [room, roomId, challengeId, dispatch]); // 참여중인 챌린지인 경우 처리\n\n  useEffect(() => {\n    if (isSocketOn && participating && room) {\n      socket.receiveMessage(msg => dispatch(actions.setMessage([msg]))); //     socket.usersOnRoom(room.usersOnRoomHandler);\n    }\n\n    return () => {\n      socket.blockMessage();\n    };\n  }, [isSocketOn, challengeId, participating, room, roomId, dispatch]);\n  useEffect(() => {\n    if (participating && room && myAlienId) {\n      dispatch(actions.selectAlien(myAlienId));\n      const alien = room.getMonster(myAlienId);\n      room.camera.setChasingTarget(alien, () => {\n        dispatch(actions.selectAlien(null));\n      });\n    }\n  }, [myAlienId, participating, room, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ChallengeRoom, \"oDgUWPHvfUy+ICtFE9HIEpkUjMM=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = ChallengeRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js"],"names":["React","useEffect","useParams","useSelector","useDispatch","actions","aquarium","api","socket","ChallengeRoom","props","dispatch","params","challengeId","roomId","room","setCurrentRoom","user","isSocketOn","aliens","participating","myAlienId","login","challenges","findIndex","c","id","Number","alien","find","a","user_info_id","fetchData","res","get","data","result","challenge","roomTitle","challenge_name","forEach","practiceDays","sun","mon","tue","wed","thu","fri","sat","showBubble","initMonsters","start","setRoom","messages","setMessage","err","console","error","close","receiveMessage","msg","blockMessage","selectAlien","getMonster","camera","setChasingTarget"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\n\nimport aquarium from \"../../../shared\";\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\n\nexport default function ChallengeRoom(props) {\n  const dispatch = useDispatch();\n  // 챌린지 정보 가져오기\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const room = aquarium.setCurrentRoom(roomId);\n\n  // user 정보 확인\n  const { user, isSocketOn, aliens } = useSelector(({ user, room }) => ({\n    user: user.user,\n    isSocketOn: user.isSocketOn,\n    aliens: room.aliens,\n  }));\n  // const userId = user.login && user.id;\n\n  // 본 챌린지에 참가중인지 확인\n  let participating = false;\n  let myAlienId = null;\n  if (user.login && user.challenges) {\n    participating =\n      user.challenges.findIndex((c) => c.id === Number(challengeId)) !== -1;\n    if (participating) {\n      let alien = aliens.find((a) => a.user_info_id === Number(user.id));\n      myAlienId = !!alien && alien.id;\n    }\n  }\n\n  // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        let res = await api.get(`/challenge/${challengeId}`);\n        // console.log(\"fetch challenge data\", res.data);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const challenge = res.data.challenge;\n          const roomTitle = `${challenge.challenge_name}`;\n          aliens.forEach((alien) => {\n            alien.practiceDays = [\n              alien.sun,\n              alien.mon,\n              alien.tue,\n              alien.wed,\n              alien.thu,\n              alien.fri,\n              alien.sat,\n            ];\n            alien.showBubble = true;\n          });\n          room.initMonsters(aliens);\n          room.start();\n          // update redux room info\n          dispatch(actions.setRoom({ roomId, aliens, roomTitle, challenge }));\n        } else {\n          return;\n        }\n        res = await api.get(`/chat/${challengeId}`);\n        if (res.data.result === \"success\") {\n          const messages = res.data.data;\n          dispatch(actions.setMessage(messages));\n        } else {\n          return;\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      room.close();\n    };\n  }, [room, roomId, challengeId, dispatch]);\n\n  // 참여중인 챌린지인 경우 처리\n  useEffect(() => {\n    if (isSocketOn && participating && room) {\n      socket.receiveMessage((msg) => dispatch(actions.setMessage([msg])));\n      //     socket.usersOnRoom(room.usersOnRoomHandler);\n    }\n    return () => {\n      socket.blockMessage();\n    };\n  }, [isSocketOn, challengeId, participating, room, roomId, dispatch]);\n\n  useEffect(() => {\n    if (participating && room && myAlienId) {\n      dispatch(actions.selectAlien(myAlienId));\n      const alien = room.getMonster(myAlienId);\n      room.camera.setChasingTarget(alien, () => {\n        dispatch(actions.selectAlien(null));\n      });\n    }\n  }, [myAlienId, participating, room, dispatch]);\n\n  return <div></div>;\n}\n"]},"metadata":{},"sourceType":"module"}