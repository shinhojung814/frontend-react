{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/UserRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport api from \"../../../apis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserRoom(props) {\n  _s();\n\n  const dispatch = useDispatch(); // 유저 정보 가져오기\n\n  let params = useParams();\n  const userId = params.userId;\n  const roomId = `user-${userId}`;\n  const {\n    rooms\n  } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId);\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.get(`/user/${userId}`); // console.log(\"fetch main data\", res.data);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const user = res.data.user;\n          const roomTitle = `${user.nickname}의 어항`;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start(); // update redux room info\n\n          dispatch(actions.setRoom({\n            roomId,\n            aliens,\n            roomTitle\n          }));\n        } else {}\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      rooms.current[roomId].close();\n    }; // }, []);\n  }, [rooms, roomId, userId, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UserRoom, \"YZr48d/Dou8172FhP6j3XVCV+4I=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = UserRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/UserRoom.js"],"names":["React","useEffect","Room","useParams","useDispatch","actions","api","UserRoom","props","dispatch","params","userId","roomId","rooms","current","fetchData","res","get","data","result","aliens","user","roomTitle","nickname","initMonsters","start","setRoom","err","console","error","close"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,OAAOC,GAAP,MAAgB,eAAhB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CADsC,CAEtC;;AACA,MAAIM,MAAM,GAAGP,SAAS,EAAtB;AACA,QAAMQ,MAAM,GAAGD,MAAM,CAACC,MAAtB;AACA,QAAMC,MAAM,GAAI,QAAOD,MAAO,EAA9B;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAYL,KAAlB;AACA,MAAI,CAACK,KAAK,CAACC,OAAX,EAAoBD,KAAK,CAACC,OAAN,GAAgB,EAAhB;AACpB,MAAI,CAACD,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4BC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwB,IAAIV,IAAJ,CAASU,MAAT,CAAxB;AAE5BX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF,YAAMc,SAAS,GAAG,YAAY;AAC5B,cAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAS,SAAQN,MAAO,EAAxB,CAAlB,CAD4B,CAE5B;;AACA,YAAIK,GAAG,CAACE,IAAJ,CAASC,MAAT,KAAoB,SAAxB,EAAmC;AACjC;AACA,gBAAMC,MAAM,GAAGJ,GAAG,CAACE,IAAJ,CAASE,MAAxB;AACA,gBAAMC,IAAI,GAAGL,GAAG,CAACE,IAAJ,CAASG,IAAtB;AACA,gBAAMC,SAAS,GAAI,GAAED,IAAI,CAACE,QAAS,MAAnC;AACAV,UAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBY,YAAtB,CAAmCJ,MAAnC;AACAP,UAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBa,KAAtB,GANiC,CAOjC;;AACAhB,UAAAA,QAAQ,CAACJ,OAAO,CAACqB,OAAR,CAAgB;AAAEd,YAAAA,MAAF;AAAUQ,YAAAA,MAAV;AAAkBE,YAAAA;AAAlB,WAAhB,CAAD,CAAR;AACD,SATD,MASO,CACN;AACF,OAdD;;AAeAP,MAAAA,SAAS;AACV,KAjBD,CAiBE,OAAOY,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACD;;AACD,WAAO,MAAM;AACXd,MAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBkB,KAAtB;AACD,KAFD,CArBc,CAwBd;AACD,GAzBQ,EAyBN,CAACjB,KAAD,EAAQD,MAAR,EAAgBD,MAAhB,EAAwBF,QAAxB,CAzBM,CAAT;AA2BA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAtCuBF,Q;UACLH,W,EAEJD,S;;;KAHSI,Q","sourcesContent":["import React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport api from \"../../../apis\";\n\nexport default function UserRoom(props) {\n  const dispatch = useDispatch();\n  // 유저 정보 가져오기\n  let params = useParams();\n  const userId = params.userId;\n  const roomId = `user-${userId}`;\n  const { rooms } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId);\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.get(`/user/${userId}`);\n        // console.log(\"fetch main data\", res.data);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const user = res.data.user;\n          const roomTitle = `${user.nickname}의 어항`;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start();\n          // update redux room info\n          dispatch(actions.setRoom({ roomId, aliens, roomTitle }));\n        } else {\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      rooms.current[roomId].close();\n    };\n    // }, []);\n  }, [rooms, roomId, userId, dispatch]);\n\n  return <div></div>;\n}\n"]},"metadata":{},"sourceType":"module"}