{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/PlazaRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport api from \"../../../apis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlazaRoom(props) {\n  _s();\n\n  const dispatch = useDispatch(); // 챌린지 정보 가져오기\n\n  const roomId = \"plaza\";\n  const {\n    rooms\n  } = props;\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        if (!rooms.current) rooms.current = {};\n        const res = await api.get(\"/main\");\n        console.log(\"fetch main data\", res.data);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          rooms.current[roomId] = new Room(roomId);\n          console.log('plazaroom:', roomId);\n          rooms.current[roomId].initMonsters(res.data.data);\n          rooms.current[roomId].start(); // TODO: redux\n\n          dispatch(actions.setRoom({\n            roomId: roomId,\n            aliens: res.data.data\n          }));\n        } else {}\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      rooms.current[roomId].close();\n    }; //   }, []);\n  }, [rooms, roomId, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n\n_s(PlazaRoom, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = PlazaRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlazaRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/PlazaRoom.js"],"names":["React","useEffect","Room","useDispatch","actions","api","PlazaRoom","props","dispatch","roomId","rooms","fetchData","current","res","get","console","log","data","result","initMonsters","start","setRoom","aliens","err","error","close"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,OAAOC,GAAP,MAAgB,eAAhB;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAEvC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CAFuC,CAIvC;;AACA,QAAMM,MAAM,GAAG,OAAf;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYH,KAAlB;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF,YAAMU,SAAS,GAAG,YAAY;AAC5B,YAAI,CAACD,KAAK,CAACE,OAAX,EAAoBF,KAAK,CAACE,OAAN,GAAgB,EAAhB;AACpB,cAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,GAAJ,CAAQ,OAAR,CAAlB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,GAAG,CAACI,IAAnC;;AACA,YAAIJ,GAAG,CAACI,IAAJ,CAASC,MAAT,KAAoB,SAAxB,EAAmC;AACjC;AACAR,UAAAA,KAAK,CAACE,OAAN,CAAcH,MAAd,IAAwB,IAAIP,IAAJ,CAASO,MAAT,CAAxB;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,MAA1B;AACAC,UAAAA,KAAK,CAACE,OAAN,CAAcH,MAAd,EAAsBU,YAAtB,CAAmCN,GAAG,CAACI,IAAJ,CAASA,IAA5C;AACAP,UAAAA,KAAK,CAACE,OAAN,CAAcH,MAAd,EAAsBW,KAAtB,GALiC,CAMjC;;AACAZ,UAAAA,QAAQ,CAACJ,OAAO,CAACiB,OAAR,CAAgB;AAACZ,YAAAA,MAAM,EAACA,MAAR;AAAgBa,YAAAA,MAAM,EAAET,GAAG,CAACI,IAAJ,CAASA;AAAjC,WAAhB,CAAD,CAAR;AACD,SARD,MAQO,CACN;AACF,OAdD;;AAeAN,MAAAA,SAAS;AACV,KAjBD,CAiBE,OAAOY,GAAP,EAAY;AACZR,MAAAA,OAAO,CAACS,KAAR,CAAc,gBAAd,EAAgCD,GAAhC;AACD;;AACD,WAAO,MAAM;AACXb,MAAAA,KAAK,CAACE,OAAN,CAAcH,MAAd,EAAsBgB,KAAtB;AACD,KAFD,CArBc,CAwBd;AACD,GAzBQ,EAyBN,CAACf,KAAD,EAAQD,MAAR,EAAgBD,QAAhB,CAzBM,CAAT;AA2BA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnCuBF,S;UAELH,W;;;KAFKG,S","sourcesContent":["import React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport api from \"../../../apis\";\n\nexport default function PlazaRoom(props) {\n\n  const dispatch = useDispatch();\n\n  // 챌린지 정보 가져오기\n  const roomId = \"plaza\";\n  const { rooms } = props;\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        if (!rooms.current) rooms.current = {};\n        const res = await api.get(\"/main\");\n        console.log(\"fetch main data\", res.data);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          rooms.current[roomId] = new Room(roomId);\n          console.log('plazaroom:', roomId)\n          rooms.current[roomId].initMonsters(res.data.data);\n          rooms.current[roomId].start();\n          // TODO: redux\n          dispatch(actions.setRoom({roomId:roomId, aliens: res.data.data}))\n        } else {\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      rooms.current[roomId].close();\n    };\n    //   }, []);\n  }, [rooms, roomId, dispatch]);\n\n  return <div></div>;\n}\n"]},"metadata":{},"sourceType":"module"}