{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChallengeRoom(props) {\n  _s();\n\n  const dispatch = useDispatch(); // 챌린지 정보 가져오기\n\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const {\n    rooms\n  } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId); // user 정보 확인\n\n  const {\n    user\n  } = useSelector(({\n    user\n  }) => ({\n    user: user.user\n  }));\n\n  const isChaIdIn = (challenges, cId) => {\n    return challenges.findIndex(c => c.Challenge_id === cId) !== -1;\n  };\n\n  let participating = user && isChaIdIn(user.challenges, Number(challengeId)); // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.post(\"/user/aquarium/challenge\", {\n          challenge_id: challengeId\n        }); // console.log(\"fetch challenge data\", res.data.Alien);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.Alien;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start(); // update redux room info\n\n          dispatch(actions.setRoom({\n            roomId,\n            aliens\n          }));\n        } else {}\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      rooms.current[roomId].close();\n    }; //   }, []);\n  }, [rooms, roomId, challengeId, dispatch]);\n  useEffect(() => {\n    // user가 참여중인 방인지 확인\n    if (participating && rooms.current[roomId]) {\n      // console.log(\"handle socket here!\", participating);\n      socket.initAndJoin({\n        roomId,\n        userId: user.id\n      });\n      socket.usersOnRoom(rooms.current[roomId].usersOnRoomHandler); // socket.subscribe(rooms.current[roomId].syncFieldState);\n    } else if (rooms.current[roomId]) {\n      rooms.current[roomId].eraseUsersOnRoom();\n    }\n\n    return () => {\n      console.log(\"challenge\", 123);\n      socket.disconnect(roomId);\n    };\n  }, [rooms, roomId, challengeId, participating]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n} // 주의! 아직 지우지 말기! 챌린지 리스트 그릴 때 소켓 방식 활용해야 함\n// useEffect(() => {\n//   // rooms가 생성되었는지 확인\n//   if (!rooms.current || !currRoomId) return;\n//   // 해당 room에 조인\n//   console.log(\"set currRoomId\", currRoomId);\n//   // socket.initAndJoin(currRoomId);\n//   // socket.subscribe(rooms.current[currRoomId].syncFieldState);\n//   // room의 update logic start\n//   rooms.current[currRoomId].start();\n//   return () => {\n//     // socket.disconnect();\n//     rooms.current[currRoomId].close();\n//   };\n// }, [currRoomId]);\n\n_s(ChallengeRoom, \"hxzrhRciT1hgrtwiJpxaNrHR3bE=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = ChallengeRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js"],"names":["React","useEffect","Room","useParams","useSelector","useDispatch","actions","api","socket","ChallengeRoom","props","dispatch","params","challengeId","roomId","rooms","current","user","isChaIdIn","challenges","cId","findIndex","c","Challenge_id","participating","Number","fetchData","res","post","challenge_id","data","result","aliens","Alien","initMonsters","start","setRoom","err","console","error","close","initAndJoin","userId","id","usersOnRoom","usersOnRoomHandler","eraseUsersOnRoom","log","disconnect"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\n\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\n\nexport default function ChallengeRoom(props) {\n  const dispatch = useDispatch();\n  // 챌린지 정보 가져오기\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const { rooms } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId);\n\n  // user 정보 확인\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const isChaIdIn = (challenges, cId) => {\n    return challenges.findIndex((c) => c.Challenge_id === cId) !== -1;\n  };\n  let participating = user && isChaIdIn(user.challenges, Number(challengeId));\n  // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.post(\"/user/aquarium/challenge\", {\n          challenge_id: challengeId,\n        });\n        // console.log(\"fetch challenge data\", res.data.Alien);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.Alien;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start();\n          // update redux room info\n          dispatch(actions.setRoom({ roomId, aliens }));\n        } else {\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      rooms.current[roomId].close();\n    };\n    //   }, []);\n  }, [rooms, roomId, challengeId, dispatch]);\n\n  useEffect(() => {\n    // user가 참여중인 방인지 확인\n    if (participating && rooms.current[roomId]) {\n      // console.log(\"handle socket here!\", participating);\n      socket.initAndJoin({ roomId, userId: user.id });\n      socket.usersOnRoom(rooms.current[roomId].usersOnRoomHandler);\n      // socket.subscribe(rooms.current[roomId].syncFieldState);\n    } else if (rooms.current[roomId]) {\n      rooms.current[roomId].eraseUsersOnRoom();\n    }\n    return () => {\n      console.log(\"challenge\", 123);\n      socket.disconnect(roomId);\n    };\n  }, [rooms, roomId, challengeId, participating]);\n\n  return <div></div>;\n}\n\n// 주의! 아직 지우지 말기! 챌린지 리스트 그릴 때 소켓 방식 활용해야 함\n// useEffect(() => {\n//   // rooms가 생성되었는지 확인\n//   if (!rooms.current || !currRoomId) return;\n\n//   // 해당 room에 조인\n//   console.log(\"set currRoomId\", currRoomId);\n//   // socket.initAndJoin(currRoomId);\n//   // socket.subscribe(rooms.current[currRoomId].syncFieldState);\n//   // room의 update logic start\n//   rooms.current[currRoomId].start();\n\n//   return () => {\n//     // socket.disconnect();\n//     rooms.current[currRoomId].close();\n//   };\n// }, [currRoomId]);\n"]},"metadata":{},"sourceType":"module"}