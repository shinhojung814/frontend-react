{"ast":null,"code":"import Camera from \"./Camera\";\nimport Wanderer from \"../creature/Wanderer\";\nimport { FRAME_PER_SEC } from \"../lib/Constants\";\n\nclass RoomClient {\n  constructor(roomId) {\n    this.initMonsters = monsters => {\n      // console.log(\"initMonsters\", monsters);\n      this.fieldState.monsters = {};\n      monsters.forEach(mon => {\n        const monster = new Wanderer({\n          userId: mon.user_info_id,\n          monId: mon.id,\n          color: mon.color,\n          authCnt: mon.accumulated_count,\n          image_url: mon.image_url,\n          wanderRange: 300 + 30 * monsters.length\n        });\n        monster.overwrite({\n          showBubble: mon.showBubble || false,\n          practiceStatus: mon.practice_status || 0,\n          practiceDays: mon.practiceDays || []\n        });\n        monster.isUserOnRoom = this.usersOnRoom.includes(monster.userId); // console.log(monster.monId, monster.isUserOnRoom);\n\n        this.fieldState.monsters[mon.id] = monster;\n      });\n    };\n\n    this.syncFieldState = socketState => {\n      const monsterLength = Object.keys(socketState.monsters).length;\n      console.log(\"[socket] syncFieldState:\", socketState);\n\n      if (monsterLength <= 0) {\n        console.error(\"ERROR!! zero monster issue should be fixed!!\");\n        return;\n      } // monster를 하나씩 업데이트\n\n\n      for (let monId in socketState.monsters) {\n        // socket에서 받아온 monster plain object\n        const monPlain = socketState.monsters[monId]; // 해당 monster가 없는 경우 object 생성해 추가\n\n        if (!(monId in this.fieldState.monsters)) {\n          const monster = new Wanderer({\n            userId: monPlain.userId,\n            monId: monPlain.monId\n          });\n          monster.overwrite(monPlain);\n          this.fieldState.monsters[monId] = monster;\n        } // 기존에 있던 경우 일부만 변경\n        else {\n            this.fieldState.monsters[monId].sync(monPlain);\n          }\n      } // this.fieldState = socketState;\n\n    };\n\n    this.usersOnRoomHandler = users => {\n      console.log(\"usersOnRoomHandler\", users);\n      this.usersOnRoom = users;\n\n      for (let monId in this.fieldState.monsters) {\n        let mon = this.fieldState.monsters[monId];\n        mon.isUserOnRoom = this.usersOnRoom.includes(mon.userId); // console.log(mon.monId, mon.isUserOnRoom);\n      }\n    };\n\n    this.eraseUsersOnRoom = () => {\n      for (let monId in this.fieldState.monsters) {\n        let mon = this.fieldState.monsters[monId];\n        mon.isUserOnRoom = false;\n      }\n    };\n\n    // console.log(\"Room init\", roomId);\n    this.roomId = roomId;\n    this.camera = new Camera();\n    this.initFieldState();\n    this.interval = undefined;\n    this.usersOnRoom = [];\n  }\n\n  initFieldState() {\n    // TODO: 서버에서 해당 어항에 포함된 몬스터들을 가져오기\n    const state = {\n      monsters: {}\n    };\n    this.fieldState = state;\n  }\n\n  updateGameState() {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.run();\n    }\n  }\n\n  start() {\n    console.log(\"[room] start\", this.roomId);\n    clearInterval(this.interval);\n    this.interval = setInterval(() => this.updateGameState(), 1000 / FRAME_PER_SEC);\n  }\n\n  close() {\n    console.log(\"[room] close\", this.roomId);\n    clearInterval(this.interval);\n  }\n\n}\n\nexport default RoomClient;","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/shared/room/RoomClient.js"],"names":["Camera","Wanderer","FRAME_PER_SEC","RoomClient","constructor","roomId","initMonsters","monsters","fieldState","forEach","mon","monster","userId","user_info_id","monId","id","color","authCnt","accumulated_count","image_url","wanderRange","length","overwrite","showBubble","practiceStatus","practice_status","practiceDays","isUserOnRoom","usersOnRoom","includes","syncFieldState","socketState","monsterLength","Object","keys","console","log","error","monPlain","sync","usersOnRoomHandler","users","eraseUsersOnRoom","camera","initFieldState","interval","undefined","state","updateGameState","run","start","clearInterval","setInterval","close"],"mappings":"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","sourcesContent":["import Camera from \"./Camera\";\nimport Wanderer from \"../creature/Wanderer\";\nimport { FRAME_PER_SEC } from \"../lib/Constants\";\n\nclass RoomClient {\n  constructor(roomId) {\n    // console.log(\"Room init\", roomId);\n    this.roomId = roomId;\n    this.camera = new Camera();\n    this.initFieldState();\n    this.interval = undefined;\n    this.usersOnRoom = [];\n  }\n\n  initFieldState() {\n    // TODO: 서버에서 해당 어항에 포함된 몬스터들을 가져오기\n    const state = {\n      monsters: {},\n    };\n    this.fieldState = state;\n  }\n\n  initMonsters = (monsters) => {\n    // console.log(\"initMonsters\", monsters);\n    this.fieldState.monsters = {};\n    monsters.forEach((mon) => {\n      const monster = new Wanderer({\n        userId: mon.user_info_id,\n        monId: mon.id,\n        color: mon.color,\n        authCnt: mon.accumulated_count,\n        image_url: mon.image_url,\n        wanderRange: 300 + 30 * monsters.length,\n      });\n      monster.overwrite({\n        showBubble: mon.showBubble || false,\n        practiceStatus: mon.practice_status || 0,\n        practiceDays: mon.practiceDays || [],\n      });\n      monster.isUserOnRoom = this.usersOnRoom.includes(monster.userId);\n      // console.log(monster.monId, monster.isUserOnRoom);\n      this.fieldState.monsters[mon.id] = monster;\n    });\n  };\n\n  syncFieldState = (socketState) => {\n    const monsterLength = Object.keys(socketState.monsters).length;\n    console.log(\"[socket] syncFieldState:\", socketState);\n    if (monsterLength <= 0) {\n      console.error(\"ERROR!! zero monster issue should be fixed!!\");\n      return;\n    }\n    // monster를 하나씩 업데이트\n    for (let monId in socketState.monsters) {\n      // socket에서 받아온 monster plain object\n      const monPlain = socketState.monsters[monId];\n      // 해당 monster가 없는 경우 object 생성해 추가\n      if (!(monId in this.fieldState.monsters)) {\n        const monster = new Wanderer({\n          userId: monPlain.userId,\n          monId: monPlain.monId,\n        });\n        monster.overwrite(monPlain);\n        this.fieldState.monsters[monId] = monster;\n      }\n      // 기존에 있던 경우 일부만 변경\n      else {\n        this.fieldState.monsters[monId].sync(monPlain);\n      }\n    }\n    // this.fieldState = socketState;\n  };\n\n  updateGameState() {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.run();\n    }\n  }\n\n  usersOnRoomHandler = (users) => {\n    console.log(\"usersOnRoomHandler\", users);\n    this.usersOnRoom = users;\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.isUserOnRoom = this.usersOnRoom.includes(mon.userId);\n      // console.log(mon.monId, mon.isUserOnRoom);\n    }\n  };\n\n  eraseUsersOnRoom = () => {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.isUserOnRoom = false;\n    }\n  };\n\n  start() {\n    console.log(\"[room] start\", this.roomId);\n    clearInterval(this.interval);\n    this.interval = setInterval(\n      () => this.updateGameState(),\n      1000 / FRAME_PER_SEC\n    );\n  }\n\n  close() {\n    console.log(\"[room] close\", this.roomId);\n    clearInterval(this.interval);\n  }\n}\n\nexport default RoomClient;\n"]},"metadata":{},"sourceType":"module"}