{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js\";\nimport React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\";\nimport * as socket from \"../../../apis/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Field extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.resizeEventHandler = e => {\n      this.stageWidth = window.innerWidth || document.body.clientWidth;\n      this.stageHeight = window.innerHeight || document.body.clientHeight;\n    };\n\n    this.draw = (ctx, frameCnt, mouseObj) => {\n      // console.log(mouseObj);\n      let cvsWidth = ctx.canvas.width;\n      let cvsHeight = ctx.canvas.height;\n      ctx.save();\n      ctx.clearRect(0, 0, cvsWidth, cvsHeight); // translate location\n\n      ctx.translate(cvsWidth / 2, cvsHeight / 2); // draw background\n\n      ctx.fillStyle = `rgba(255, 255, 255, 1)`;\n      ctx.fillRect(0, 0, cvsWidth, cvsHeight); // draw monster\n\n      if (mouseObj.clicked) {\n        const {\n          roomId\n        } = this.props;\n        const destination = {\n          x: mouseObj.deltaXfromCenter,\n          y: mouseObj.deltaYfromCenter\n        };\n        socket.changeDestination(roomId, destination);\n      }\n\n      if (this.props.fieldState) {\n        const {\n          monsters\n        } = this.props.fieldState; // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n\n        for (const userId in monsters) {\n          let {\n            location,\n            size,\n            color\n          } = monsters[userId];\n          ctx.translate(-size / 2, -size / 2);\n          ctx.fillStyle = color;\n          ctx.fillRect(location.x, location.y, size, size);\n          ctx.translate(size / 2, size / 2);\n        }\n      }\n\n      ctx.restore();\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resizeEventHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeEventHandler);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Canvas, {\n      draw: this.draw\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js"],"names":["React","Component","Canvas","socket","Field","resizeEventHandler","e","stageWidth","window","innerWidth","document","body","clientWidth","stageHeight","innerHeight","clientHeight","draw","ctx","frameCnt","mouseObj","cvsWidth","canvas","width","cvsHeight","height","save","clearRect","translate","fillStyle","fillRect","clicked","roomId","props","destination","x","deltaXfromCenter","y","deltaYfromCenter","changeDestination","fieldState","monsters","userId","location","size","color","restore","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\";\n\nimport * as socket from \"../../../apis/socket\";\n\nexport default class Field extends Component {\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resizeEventHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resizeEventHandler);\n  }\n\n  resizeEventHandler = (e) => {\n    this.stageWidth = window.innerWidth || document.body.clientWidth;\n    this.stageHeight = window.innerHeight || document.body.clientHeight;\n  };\n\n  draw = (ctx, frameCnt, mouseObj) => {\n    // console.log(mouseObj);\n    let cvsWidth = ctx.canvas.width;\n    let cvsHeight = ctx.canvas.height;\n    ctx.save();\n    ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n    // translate location\n    ctx.translate(cvsWidth / 2, cvsHeight / 2);\n\n    // draw background\n    ctx.fillStyle = `rgba(255, 255, 255, 1)`;\n    ctx.fillRect(0, 0, cvsWidth, cvsHeight);\n\n    // draw monster\n    if (mouseObj.clicked) {\n      const { roomId } = this.props;\n      const destination = {\n        x: mouseObj.deltaXfromCenter,\n        y: mouseObj.deltaYfromCenter,\n      };\n      socket.changeDestination(roomId, destination);\n    }\n\n    if (this.props.fieldState) {\n      const { monsters } = this.props.fieldState;\n      // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n      for (const userId in monsters) {\n        let { location, size, color } = monsters[userId];\n        ctx.translate(-size / 2, -size / 2);\n        ctx.fillStyle = color;\n        ctx.fillRect(location.x, location.y, size, size);\n        ctx.translate(size / 2, size / 2);\n      }\n    }\n\n    ctx.restore();\n  };\n\n  render() {\n    return <Canvas draw={this.draw} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}