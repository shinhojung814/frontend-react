{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Room from \"./Room\";\nimport Header from \"./Header\";\nimport FieldCtrl from \"./FieldCtrl\";\nimport MultiField from \"./MultiField\";\nimport * as api from \"../../apis\";\nimport * as socket from \"../../apis/socket\";\nimport background from \"./image/univ.jpg\";\nimport styles from \"./index.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst express = require(\"express\");\n\nconst app = express();\napp.listen(5000, () => {\n  console.log(\"Server is running on PORT: 5000\");\n});\nexport default function MultiAquarium() {\n  _s();\n\n  const [testNum, setTestNum] = useState(-1);\n  const [roomIds, setRoomIds] = useState([]);\n  const [currRoomId, setCurrRoomId] = useState(null);\n  const rooms = useRef(); // 챌린지 정보 가져오기\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.get(\"/test\");\n        const data = await res.json();\n        console.log(data);\n        setTestNum(Math.round(data.body * 10000) / 10000); // 서버에서 데이터를 받아온 상황을 전제로 구성\n\n        let roomIds = [1, 2, 3]; // rooms 상태 정보\n\n        rooms.current = {};\n        roomIds.forEach(roomId => {\n          rooms.current[roomId] = new Room(roomId);\n        }); // roomIds: react에서 state로 관리할 정보\n\n        setRoomIds(roomIds);\n        setCurrRoomId(roomIds[0]);\n        console.log(\"fetchData\", rooms.current);\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n  useEffect(() => {\n    // rooms가 생성되었는지 확인\n    if (!rooms.current) return;\n    console.log(\"set currRoomId\", currRoomId);\n    socket.initAndJoin(currRoomId);\n    socket.subscribe(rooms.current[currRoomId].updateFieldState);\n    return () => {\n      socket.disconnect();\n    };\n  }, [currRoomId]);\n  console.log(\"[MultiAquarium] currRoomId\", currRoomId, rooms);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.body,\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.SecHead,\n      children: /*#__PURE__*/_jsxDEV(Header, {\n        rooms: roomIds,\n        roomId: currRoomId,\n        setRoomId: setCurrRoomId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.SecFieldCtrl,\n      children: /*#__PURE__*/_jsxDEV(FieldCtrl, {\n        room: rooms.current && rooms.current[currRoomId]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.SecField,\n      children: /*#__PURE__*/_jsxDEV(MultiField, {\n        room: rooms.current && rooms.current[currRoomId]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiAquarium, \"t2PY25eUagr/y5K+mAVvwpf67j4=\");\n\n_c = MultiAquarium;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiAquarium\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/index.js"],"names":["React","useState","useEffect","useRef","Room","Header","FieldCtrl","MultiField","api","socket","background","styles","express","require","app","listen","console","log","MultiAquarium","testNum","setTestNum","roomIds","setRoomIds","currRoomId","setCurrRoomId","rooms","fetchData","res","get","data","json","Math","round","body","current","forEach","roomId","err","error","initAndJoin","subscribe","updateFieldState","disconnect","SecHead","SecFieldCtrl","SecField"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nimport Room from \"./Room\";\nimport Header from \"./Header\";\nimport FieldCtrl from \"./FieldCtrl\";\nimport MultiField from \"./MultiField\";\nimport * as api from \"../../apis\";\nimport * as socket from \"../../apis/socket\";\nimport background from \"./image/univ.jpg\";\nimport styles from \"./index.module.css\";\n\nconst express = require(\"express\");\nconst app = express();\n\napp.listen(5000, () => {\n  console.log(\"Server is running on PORT: 5000\");\n});\n\nexport default function MultiAquarium() {\n  const [testNum, setTestNum] = useState(-1);\n  const [roomIds, setRoomIds] = useState([]);\n  const [currRoomId, setCurrRoomId] = useState(null);\n  const rooms = useRef();\n\n  // 챌린지 정보 가져오기\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        const res = await api.get(\"/test\");\n        const data = await res.json();\n        console.log(data);\n        setTestNum(Math.round(data.body * 10000) / 10000);\n\n        // 서버에서 데이터를 받아온 상황을 전제로 구성\n        let roomIds = [1, 2, 3];\n\n        // rooms 상태 정보\n        rooms.current = {};\n        roomIds.forEach((roomId) => {\n          rooms.current[roomId] = new Room(roomId);\n        });\n\n        // roomIds: react에서 state로 관리할 정보\n        setRoomIds(roomIds);\n        setCurrRoomId(roomIds[0]);\n        console.log(\"fetchData\", rooms.current);\n      };\n      fetchData();\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  useEffect(() => {\n    // rooms가 생성되었는지 확인\n    if (!rooms.current) return;\n\n    console.log(\"set currRoomId\", currRoomId);\n    socket.initAndJoin(currRoomId);\n    socket.subscribe(rooms.current[currRoomId].updateFieldState);\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [currRoomId]);\n\n  console.log(\"[MultiAquarium] currRoomId\", currRoomId, rooms);\n  return (\n    <div className={styles.body}>\n      {/* <img src={background} alt=\"배경화면\"></img> */}\n      <section className={styles.SecHead}>\n        <Header rooms={roomIds} roomId={currRoomId} setRoomId={setCurrRoomId} />\n      </section>\n      <section className={styles.SecFieldCtrl}>\n        <FieldCtrl room={rooms.current && rooms.current[currRoomId]} />\n      </section>\n      <section className={styles.SecField}>\n        <MultiField room={rooms.current && rooms.current[currRoomId]} />\n      </section>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}