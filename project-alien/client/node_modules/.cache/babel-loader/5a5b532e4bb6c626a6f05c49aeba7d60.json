{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js\";\nimport React, { Component } from \"react\";\nimport Canvas from \"./Canvas\";\nimport aquarium from \"../../../shared\"; // import * as socket from \"../../../apis/socket\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Field extends Component {\n  constructor(...args) {\n    super(...args);\n    this.BG_COLORSET = {\n      sunset: [// https://www.color-hex.com/color-palette/40131\n      `rgba(238,175,97,1)`, `rgba(251,144,98,1)`, `rgba(238,93,108,1)`, `rgba(206,73,147,1)`],\n      space: [// https://www.color-hex.com/color-palette/35848\n      `rgba(5,55,123,1)`, `rgba(4,44,98,1)`, `rgba(3,33,74,1)`, `rgba(1,11,25,1)`]\n    };\n\n    this.draw = (ctx, frameCnt, mouseObj) => {\n      // console.log(mouseObj);\n      let cvsWidth = ctx.canvas.width;\n      let cvsHeight = ctx.canvas.height;\n      ctx.save();\n      ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n      const room = aquarium.getCurrentRoom();\n\n      if (room && room.fieldState) {\n        const {\n          monsters\n        } = room.fieldState; // console.log(111, room.usersOnRoom);\n        // draw background\n\n        let lingrad = ctx.createLinearGradient(0, 0, 0, cvsHeight);\n        let colorset = this.BG_COLORSET[\"space\"];\n        let pcts = room.camera.getGradientPct();\n        lingrad.addColorStop(0, colorset[0]);\n        lingrad.addColorStop(pcts[0], colorset[1]);\n        lingrad.addColorStop(pcts[1], colorset[2]);\n        lingrad.addColorStop(1, colorset[3]);\n        ctx.fillStyle = lingrad;\n        ctx.fillRect(0, 0, cvsWidth, cvsHeight); // translate location\n\n        const {\n          center\n        } = room.camera;\n        room.camera.run();\n        let transX = center.x;\n        let transY = center.y;\n        ctx.translate(cvsWidth / 2 - transX, cvsHeight / 2 - transY);\n        let mouseX = mouseObj.deltaXfromCenter + transX;\n        let mouseY = mouseObj.deltaYfromCenter + transY;\n        let selectedMonster = null; // draw central planet\n\n        ctx.beginPath();\n        ctx.arc(0, room.camera.getCanvasPlanetSize(400), room.camera.getCanvasPlanetSize(400), 0, Math.PI * 2);\n        var grd = ctx.createRadialGradient(100, 50, 0, 90, 60, 1000);\n        grd.addColorStop(0, \"#f0c0ff\");\n        grd.addColorStop(0.25, \"#9048f0\");\n        grd.addColorStop(0.5, \"#6018c0\");\n        grd.addColorStop(1, \"black\");\n        ctx.fillStyle = grd;\n        ctx.fill(); // draw monster\n        // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n\n        for (const monId in monsters) {\n          let {\n            location,\n            size\n          } = monsters[monId];\n          let x = room.camera.getCanvasSize(location.x);\n          let y = room.camera.getCanvasSize(location.y);\n          size = room.camera.getCanvasSize(size) / 2; // if (isUserOnRoom) console.log(x, y);\n\n          if (mouseObj.clicked && !selectedMonster && (x - mouseX) ** 2 + (y - mouseY) ** 2 < size ** 2) {\n            // console.log(monId);\n            selectedMonster = monId;\n            this.props.handleSelectAlien(monId);\n          }\n\n          monsters[monId].display(ctx, frameCnt, room); // if (isUserOnRoom) {\n          //   ctx.beginPath();\n          //   ctx.arc(x, y, 8, 0, Math.PI * 2);\n          //   ctx.fillStyle = \"tomato\";\n          //   ctx.fill();\n          // }\n        }\n      }\n\n      ctx.restore();\n    };\n  }\n\n  render() {\n    const room = aquarium.getCurrentRoom();\n\n    if (!!room) {\n      return /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.draw,\n        onMouseDown: room.camera.onMouseDown,\n        onMouseMove: room.camera.onMouseMove,\n        onMouseUp: room.camera.onMouseUp,\n        onTouchStart: room.camera.onTouchStart,\n        onTouchMove: room.camera.onTouchMove,\n        onTouchEnd: room.camera.onTouchEnd,\n        onWheel: room.camera.onWheel,\n        onResize: room.camera.onResize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uB85C\\uB529\\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js"],"names":["React","Component","Canvas","aquarium","Field","BG_COLORSET","sunset","space","draw","ctx","frameCnt","mouseObj","cvsWidth","canvas","width","cvsHeight","height","save","clearRect","room","getCurrentRoom","fieldState","monsters","lingrad","createLinearGradient","colorset","pcts","camera","getGradientPct","addColorStop","fillStyle","fillRect","center","run","transX","x","transY","y","translate","mouseX","deltaXfromCenter","mouseY","deltaYfromCenter","selectedMonster","beginPath","arc","getCanvasPlanetSize","Math","PI","grd","createRadialGradient","fill","monId","location","size","getCanvasSize","clicked","props","handleSelectAlien","display","restore","render","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onWheel","onResize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Canvas from \"./Canvas\";\n\nimport aquarium from \"../../../shared\";\n\n// import * as socket from \"../../../apis/socket\";\n\nexport default class Field extends Component {\n  BG_COLORSET = {\n    sunset: [\n      // https://www.color-hex.com/color-palette/40131\n      `rgba(238,175,97,1)`,\n      `rgba(251,144,98,1)`,\n      `rgba(238,93,108,1)`,\n      `rgba(206,73,147,1)`,\n    ],\n    space: [\n      // https://www.color-hex.com/color-palette/35848\n      `rgba(5,55,123,1)`,\n      `rgba(4,44,98,1)`,\n      `rgba(3,33,74,1)`,\n      `rgba(1,11,25,1)`,\n    ],\n  };\n\n  draw = (ctx, frameCnt, mouseObj) => {\n    // console.log(mouseObj);\n    let cvsWidth = ctx.canvas.width;\n    let cvsHeight = ctx.canvas.height;\n    ctx.save();\n    ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n    const room = aquarium.getCurrentRoom();\n    if (room && room.fieldState) {\n      const { monsters } = room.fieldState;\n      // console.log(111, room.usersOnRoom);\n      // draw background\n      let lingrad = ctx.createLinearGradient(0, 0, 0, cvsHeight);\n      let colorset = this.BG_COLORSET[\"space\"];\n      let pcts = room.camera.getGradientPct();\n      lingrad.addColorStop(0, colorset[0]);\n      lingrad.addColorStop(pcts[0], colorset[1]);\n      lingrad.addColorStop(pcts[1], colorset[2]);\n      lingrad.addColorStop(1, colorset[3]);\n      ctx.fillStyle = lingrad;\n      ctx.fillRect(0, 0, cvsWidth, cvsHeight);\n\n      // translate location\n      const { center } = room.camera;\n      room.camera.run();\n      let transX = center.x;\n      let transY = center.y;\n      ctx.translate(cvsWidth / 2 - transX, cvsHeight / 2 - transY);\n\n      let mouseX = mouseObj.deltaXfromCenter + transX;\n      let mouseY = mouseObj.deltaYfromCenter + transY;\n      let selectedMonster = null;\n\n      // draw central planet\n      ctx.beginPath();\n      ctx.arc(\n        0,\n        room.camera.getCanvasPlanetSize(400),\n        room.camera.getCanvasPlanetSize(400),\n        0,\n        Math.PI * 2\n      );\n      var grd = ctx.createRadialGradient(100, 50, 0, 90, 60, 1000);\n      grd.addColorStop(0, \"#f0c0ff\");\n      grd.addColorStop(0.25, \"#9048f0\");\n      grd.addColorStop(0.5, \"#6018c0\");\n      grd.addColorStop(1, \"black\");\n      ctx.fillStyle = grd;\n      ctx.fill();\n\n      // draw monster\n      // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n      for (const monId in monsters) {\n        let { location, size } = monsters[monId];\n        let x = room.camera.getCanvasSize(location.x);\n        let y = room.camera.getCanvasSize(location.y);\n        size = room.camera.getCanvasSize(size) / 2;\n        // if (isUserOnRoom) console.log(x, y);\n        if (\n          mouseObj.clicked &&\n          !selectedMonster &&\n          (x - mouseX) ** 2 + (y - mouseY) ** 2 < size ** 2\n        ) {\n          // console.log(monId);\n          selectedMonster = monId;\n          this.props.handleSelectAlien(monId);\n        }\n\n        monsters[monId].display(ctx, frameCnt, room);\n\n        // if (isUserOnRoom) {\n        //   ctx.beginPath();\n        //   ctx.arc(x, y, 8, 0, Math.PI * 2);\n        //   ctx.fillStyle = \"tomato\";\n        //   ctx.fill();\n        // }\n      }\n    }\n    ctx.restore();\n  };\n\n  render() {\n    const room = aquarium.getCurrentRoom();\n    if (!!room) {\n      return (\n        <Canvas\n          draw={this.draw}\n          onMouseDown={room.camera.onMouseDown}\n          onMouseMove={room.camera.onMouseMove}\n          onMouseUp={room.camera.onMouseUp}\n          onTouchStart={room.camera.onTouchStart}\n          onTouchMove={room.camera.onTouchMove}\n          onTouchEnd={room.camera.onTouchEnd}\n          onWheel={room.camera.onWheel}\n          onResize={room.camera.onResize}\n        />\n      );\n    } else {\n      return <div>로딩중...</div>;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}