{"ast":null,"code":"import Camera from \"./Camera\";\nimport Wanderer from \"../creature/Wanderer\";\nimport { FRAME_PER_SEC } from \"../lib/Constants\";\n\nclass RoomClient {\n  constructor(roomId) {\n    this.initMonsters = monsters => {\n      // console.log(\"initMonsters\", monsters);\n      this.fieldState.monsters = {};\n      monsters.forEach(mon => {\n        const monster = new Wanderer({\n          userId: mon.user_info_id,\n          monId: mon.id,\n          color: mon.color,\n          authCnt: mon.accured_auth_cnt,\n          image_url: mon.image_url,\n          wanderRange: 300 + 30 * monsters.length\n        });\n        monster.isUserOnRoom = this.usersOnRoom.includes(monster.userId); // console.log(monster.monId, monster.isUserOnRoom);\n\n        this.fieldState.monsters[mon.id] = monster;\n      });\n    };\n\n    this.syncFieldState = socketState => {\n      const monsterLength = Object.keys(socketState.monsters).length;\n      console.log(\"[socket] syncFieldState:\", socketState);\n\n      if (monsterLength <= 0) {\n        console.error(\"ERROR!! zero monster issue should be fixed!!\");\n        return;\n      } // monster를 하나씩 업데이트\n\n\n      for (let monId in socketState.monsters) {\n        // socket에서 받아온 monster plain object\n        const monPlain = socketState.monsters[monId]; // 해당 monster가 없는 경우 object 생성해 추가\n\n        if (!(monId in this.fieldState.monsters)) {\n          const monster = new Wanderer({\n            userId: monPlain.userId,\n            monId: monPlain.monId\n          });\n          monster.overwrite(monPlain);\n          this.fieldState.monsters[monId] = monster;\n        } // 기존에 있던 경우 일부만 변경\n        else {\n            this.fieldState.monsters[monId].sync(monPlain);\n          }\n      } // this.fieldState = socketState;\n\n    };\n\n    this.usersOnRoomHandler = users => {\n      console.log(\"usersOnRoomHandler\", users);\n      this.usersOnRoom = users;\n\n      for (let monId in this.fieldState.monsters) {\n        let mon = this.fieldState.monsters[monId];\n        mon.isUserOnRoom = this.usersOnRoom.includes(mon.userId); // console.log(mon.monId, mon.isUserOnRoom);\n      }\n    };\n\n    this.eraseUsersOnRoom = () => {\n      for (let monId in this.fieldState.monsters) {\n        let mon = this.fieldState.monsters[monId];\n        mon.isUserOnRoom = false;\n      }\n    };\n\n    // console.log(\"Room init\", roomId);\n    this.roomId = roomId;\n    this.camera = new Camera();\n    this.initFieldState();\n    this.interval = undefined;\n    this.usersOnRoom = [];\n  }\n\n  initFieldState() {\n    // TODO: 서버에서 해당 어항에 포함된 몬스터들을 가져오기\n    const state = {\n      monsters: {}\n    };\n    this.fieldState = state;\n  }\n\n  updateGameState() {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.run();\n    }\n  }\n\n  start() {\n    console.log(\"[room] start\", this.roomId);\n    clearInterval(this.interval);\n    this.interval = setInterval(() => this.updateGameState(), 1000 / FRAME_PER_SEC);\n  }\n\n  close() {\n    console.log(\"[room] close\", this.roomId);\n    clearInterval(this.interval);\n  }\n\n}\n\nexport default RoomClient;","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/shared/room/RoomClient.js"],"names":["Camera","Wanderer","FRAME_PER_SEC","RoomClient","constructor","roomId","initMonsters","monsters","fieldState","forEach","mon","monster","userId","user_info_id","monId","id","color","authCnt","accured_auth_cnt","image_url","wanderRange","length","isUserOnRoom","usersOnRoom","includes","syncFieldState","socketState","monsterLength","Object","keys","console","log","error","monPlain","overwrite","sync","usersOnRoomHandler","users","eraseUsersOnRoom","camera","initFieldState","interval","undefined","state","updateGameState","run","start","clearInterval","setInterval","close"],"mappings":"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","sourcesContent":["import Camera from \"./Camera\";\nimport Wanderer from \"../creature/Wanderer\";\nimport { FRAME_PER_SEC } from \"../lib/Constants\";\n\nclass RoomClient {\n  constructor(roomId) {\n    // console.log(\"Room init\", roomId);\n    this.roomId = roomId;\n    this.camera = new Camera();\n    this.initFieldState();\n    this.interval = undefined;\n    this.usersOnRoom = [];\n  }\n\n  initFieldState() {\n    // TODO: 서버에서 해당 어항에 포함된 몬스터들을 가져오기\n    const state = {\n      monsters: {},\n    };\n    this.fieldState = state;\n  }\n\n  initMonsters = (monsters) => {\n    // console.log(\"initMonsters\", monsters);\n    this.fieldState.monsters = {};\n    monsters.forEach((mon) => {\n      const monster = new Wanderer({\n        userId: mon.user_info_id,\n        monId: mon.id,\n        color: mon.color,\n        authCnt: mon.accured_auth_cnt,\n        image_url: mon.image_url,\n        wanderRange: 300 + 30 * monsters.length,\n      });\n      monster.isUserOnRoom = this.usersOnRoom.includes(monster.userId);\n      // console.log(monster.monId, monster.isUserOnRoom);\n      this.fieldState.monsters[mon.id] = monster;\n    });\n  };\n\n  syncFieldState = (socketState) => {\n    const monsterLength = Object.keys(socketState.monsters).length;\n    console.log(\"[socket] syncFieldState:\", socketState);\n    if (monsterLength <= 0) {\n      console.error(\"ERROR!! zero monster issue should be fixed!!\");\n      return;\n    }\n    // monster를 하나씩 업데이트\n    for (let monId in socketState.monsters) {\n      // socket에서 받아온 monster plain object\n      const monPlain = socketState.monsters[monId];\n      // 해당 monster가 없는 경우 object 생성해 추가\n      if (!(monId in this.fieldState.monsters)) {\n        const monster = new Wanderer({\n          userId: monPlain.userId,\n          monId: monPlain.monId,\n        });\n        monster.overwrite(monPlain);\n        this.fieldState.monsters[monId] = monster;\n      }\n      // 기존에 있던 경우 일부만 변경\n      else {\n        this.fieldState.monsters[monId].sync(monPlain);\n      }\n    }\n    // this.fieldState = socketState;\n  };\n\n  updateGameState() {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.run();\n    }\n  }\n\n  usersOnRoomHandler = (users) => {\n    console.log(\"usersOnRoomHandler\", users);\n    this.usersOnRoom = users;\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.isUserOnRoom = this.usersOnRoom.includes(mon.userId);\n      // console.log(mon.monId, mon.isUserOnRoom);\n    }\n  };\n\n  eraseUsersOnRoom = () => {\n    for (let monId in this.fieldState.monsters) {\n      let mon = this.fieldState.monsters[monId];\n      mon.isUserOnRoom = false;\n    }\n  };\n\n  start() {\n    console.log(\"[room] start\", this.roomId);\n    clearInterval(this.interval);\n    this.interval = setInterval(\n      () => this.updateGameState(),\n      1000 / FRAME_PER_SEC\n    );\n  }\n\n  close() {\n    console.log(\"[room] close\", this.roomId);\n    clearInterval(this.interval);\n  }\n}\n\nexport default RoomClient;\n"]},"metadata":{},"sourceType":"module"}