{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChallengeRoom(props) {\n  _s();\n\n  const dispatch = useDispatch(); // 챌린지 정보 가져오기\n\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const {\n    rooms\n  } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId); // user 정보 확인\n\n  const {\n    user\n  } = useSelector(({\n    user\n  }) => ({\n    user: user.user\n  }));\n  const userId = user.login && user.id; // 본 챌린지에 참가중인지 확인\n\n  let participating = false;\n\n  if (user.login && user.challenges) {\n    participating = user.challenges.findIndex(c => c.id === Number(challengeId)) !== -1;\n  } // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        let res = await api.get(`/challenge/${challengeId}`); // console.log(\"fetch challenge data\", res.data);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const challenge = res.data.challenge;\n          const roomTitle = `${challenge.challenge_name}`;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start(); // update redux room info\n\n          dispatch(actions.setRoom({\n            roomId,\n            aliens,\n            roomTitle,\n            challenge\n          }));\n        } else {\n          return;\n        }\n\n        res = await api.get(`/chat/${challengeId}`);\n\n        if (res.data.result === \"success\") {\n          const messages = res.data.data;\n          dispatch(actions.setMessage(messages));\n        } else {\n          return;\n        }\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      rooms.current[roomId].close();\n    };\n  }, [rooms, roomId, challengeId, dispatch]);\n  useEffect(() => {\n    // user가 참여중인 방인지 확인\n    if (participating && rooms.current[roomId]) {\n      // console.log(\"handle socket here!\", participating);initMonsters\n      socket.initAndJoin({\n        roomId,\n        userId: userId\n      });\n      socket.usersOnRoom(rooms.current[roomId].usersOnRoomHandler);\n      socket.messageReceive(msg => dispatch(actions.setMessage(msg))); // socket.subscribe(rooms.current[roomId].syncFieldState);\n    } else if (rooms.current[roomId]) {\n      rooms.current[roomId].eraseUsersOnRoom();\n    }\n\n    return () => {\n      socket.disconnect(roomId);\n    };\n  }, [userId, rooms, roomId, challengeId, participating, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ChallengeRoom, \"hxzrhRciT1hgrtwiJpxaNrHR3bE=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = ChallengeRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js"],"names":["React","useEffect","Room","useParams","useSelector","useDispatch","actions","api","socket","ChallengeRoom","props","dispatch","params","challengeId","roomId","rooms","current","user","userId","login","id","participating","challenges","findIndex","c","Number","fetchData","res","get","data","result","aliens","challenge","roomTitle","challenge_name","initMonsters","start","setRoom","messages","setMessage","err","console","error","close","initAndJoin","usersOnRoom","usersOnRoomHandler","messageReceive","msg","eraseUsersOnRoom","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC3C,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CAD2C,CAE3C;;AACA,MAAIO,MAAM,GAAGT,SAAS,EAAtB;AACA,QAAMU,WAAW,GAAGD,MAAM,CAACC,WAA3B;AACA,QAAMC,MAAM,GAAI,aAAYD,WAAY,EAAxC;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAYL,KAAlB;AACA,MAAI,CAACK,KAAK,CAACC,OAAX,EAAoBD,KAAK,CAACC,OAAN,GAAgB,EAAhB;AACpB,MAAI,CAACD,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4BC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwB,IAAIZ,IAAJ,CAASY,MAAT,CAAxB,CARe,CAU3C;;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAWb,WAAW,CAAC,CAAC;AAAEa,IAAAA;AAAF,GAAD,MAAe;AAAEA,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAAb,GAAf,CAAD,CAA5B;AACA,QAAMC,MAAM,GAAGD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,EAAlC,CAZ2C,CAc3C;;AACA,MAAIC,aAAa,GAAG,KAApB;;AACA,MAAIJ,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACK,UAAvB,EAAmC;AACjCD,IAAAA,aAAa,GACXJ,IAAI,CAACK,UAAL,CAAgBC,SAAhB,CAA2BC,CAAD,IAAOA,CAAC,CAACJ,EAAF,KAASK,MAAM,CAACZ,WAAD,CAAhD,MAAmE,CAAC,CADtE;AAED,GAnB0C,CAqB3C;;;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF,YAAMyB,SAAS,GAAG,YAAY;AAC5B,YAAIC,GAAG,GAAG,MAAMpB,GAAG,CAACqB,GAAJ,CAAS,cAAaf,WAAY,EAAlC,CAAhB,CAD4B,CAE5B;;AACA,YAAIc,GAAG,CAACE,IAAJ,CAASC,MAAT,KAAoB,SAAxB,EAAmC;AACjC;AACA,gBAAMC,MAAM,GAAGJ,GAAG,CAACE,IAAJ,CAASE,MAAxB;AACA,gBAAMC,SAAS,GAAGL,GAAG,CAACE,IAAJ,CAASG,SAA3B;AACA,gBAAMC,SAAS,GAAI,GAAED,SAAS,CAACE,cAAe,EAA9C;AACAnB,UAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBqB,YAAtB,CAAmCJ,MAAnC;AACAhB,UAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBsB,KAAtB,GANiC,CAOjC;;AACAzB,UAAAA,QAAQ,CAACL,OAAO,CAAC+B,OAAR,CAAgB;AAAEvB,YAAAA,MAAF;AAAUiB,YAAAA,MAAV;AAAkBE,YAAAA,SAAlB;AAA6BD,YAAAA;AAA7B,WAAhB,CAAD,CAAR;AACD,SATD,MASO;AACL;AACD;;AACDL,QAAAA,GAAG,GAAG,MAAMpB,GAAG,CAACqB,GAAJ,CAAS,SAAQf,WAAY,EAA7B,CAAZ;;AACA,YAAIc,GAAG,CAACE,IAAJ,CAASC,MAAT,KAAoB,SAAxB,EAAmC;AACjC,gBAAMQ,QAAQ,GAAGX,GAAG,CAACE,IAAJ,CAASA,IAA1B;AACAlB,UAAAA,QAAQ,CAACL,OAAO,CAACiC,UAAR,CAAmBD,QAAnB,CAAD,CAAR;AACD,SAHD,MAGO;AACL;AACD;AACF,OAtBD;;AAuBAZ,MAAAA,SAAS;AACV,KAzBD,CAyBE,OAAOc,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACD;;AACD,WAAO,MAAM;AACXzB,MAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsB6B,KAAtB;AACD,KAFD;AAGD,GAhCQ,EAgCN,CAAC5B,KAAD,EAAQD,MAAR,EAAgBD,WAAhB,EAA6BF,QAA7B,CAhCM,CAAT;AAkCAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIoB,aAAa,IAAIN,KAAK,CAACC,OAAN,CAAcF,MAAd,CAArB,EAA4C;AAC1C;AACAN,MAAAA,MAAM,CAACoC,WAAP,CAAmB;AAAE9B,QAAAA,MAAF;AAAUI,QAAAA,MAAM,EAAEA;AAAlB,OAAnB;AACAV,MAAAA,MAAM,CAACqC,WAAP,CAAmB9B,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBgC,kBAAzC;AACAtC,MAAAA,MAAM,CAACuC,cAAP,CAAuBC,GAAD,IAASrC,QAAQ,CAACL,OAAO,CAACiC,UAAR,CAAmBS,GAAnB,CAAD,CAAvC,EAJ0C,CAK1C;AACD,KAND,MAMO,IAAIjC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AAChCC,MAAAA,KAAK,CAACC,OAAN,CAAcF,MAAd,EAAsBmC,gBAAtB;AACD;;AACD,WAAO,MAAM;AACXzC,MAAAA,MAAM,CAAC0C,UAAP,CAAkBpC,MAAlB;AACD,KAFD;AAGD,GAdQ,EAcN,CAACI,MAAD,EAASH,KAAT,EAAgBD,MAAhB,EAAwBD,WAAxB,EAAqCQ,aAArC,EAAoDV,QAApD,CAdM,CAAT;AAgBA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA1EuBF,a;UACLJ,W,EAEJF,S,EAQIC,W;;;KAXKK,a","sourcesContent":["import React, { useEffect } from \"react\";\nimport Room from \"../../../shared/room/RoomClient\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\n\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\n\nexport default function ChallengeRoom(props) {\n  const dispatch = useDispatch();\n  // 챌린지 정보 가져오기\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const { rooms } = props;\n  if (!rooms.current) rooms.current = {};\n  if (!rooms.current[roomId]) rooms.current[roomId] = new Room(roomId);\n\n  // user 정보 확인\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const userId = user.login && user.id;\n\n  // 본 챌린지에 참가중인지 확인\n  let participating = false;\n  if (user.login && user.challenges) {\n    participating =\n      user.challenges.findIndex((c) => c.id === Number(challengeId)) !== -1;\n  }\n\n  // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        let res = await api.get(`/challenge/${challengeId}`);\n        // console.log(\"fetch challenge data\", res.data);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const challenge = res.data.challenge;\n          const roomTitle = `${challenge.challenge_name}`;\n          rooms.current[roomId].initMonsters(aliens);\n          rooms.current[roomId].start();\n          // update redux room info\n          dispatch(actions.setRoom({ roomId, aliens, roomTitle, challenge }));\n        } else {\n          return;\n        }\n        res = await api.get(`/chat/${challengeId}`);\n        if (res.data.result === \"success\") {\n          const messages = res.data.data;\n          dispatch(actions.setMessage(messages));\n        } else {\n          return;\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      rooms.current[roomId].close();\n    };\n  }, [rooms, roomId, challengeId, dispatch]);\n\n  useEffect(() => {\n    // user가 참여중인 방인지 확인\n    if (participating && rooms.current[roomId]) {\n      // console.log(\"handle socket here!\", participating);initMonsters\n      socket.initAndJoin({ roomId, userId: userId });\n      socket.usersOnRoom(rooms.current[roomId].usersOnRoomHandler);\n      socket.messageReceive((msg) => dispatch(actions.setMessage(msg)));\n      // socket.subscribe(rooms.current[roomId].syncFieldState);\n    } else if (rooms.current[roomId]) {\n      rooms.current[roomId].eraseUsersOnRoom();\n    }\n    return () => {\n      socket.disconnect(roomId);\n    };\n  }, [userId, rooms, roomId, challengeId, participating, dispatch]);\n\n  return <div></div>;\n}\n"]},"metadata":{},"sourceType":"module"}