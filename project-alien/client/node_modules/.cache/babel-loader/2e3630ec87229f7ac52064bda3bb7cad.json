{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\nimport aquarium from \"../../../shared\";\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChallengeRoom(props) {\n  _s();\n\n  const dispatch = useDispatch(); // 챌린지 정보 가져오기\n\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const room = aquarium.setCurrentRoom(roomId); // user 정보 확인\n\n  const {\n    user,\n    isSocketOn\n  } = useSelector(({\n    user\n  }) => ({\n    user: user.user,\n    isSocketOn: user.isSocketOn\n  })); // const userId = user.login && user.id;\n  // 본 챌린지에 참가중인지 확인\n\n  let participating = false;\n\n  if (user.login && user.challenges) {\n    participating = user.challenges.findIndex(c => c.id === Number(challengeId)) !== -1;\n  } // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        let res = await api.get(`/challenge/${challengeId}`); // console.log(\"fetch challenge data\", res.data);\n\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const challenge = res.data.challenge;\n          const roomTitle = `${challenge.challenge_name}`;\n          aliens.forEach(alien => {\n            alien.practiceDays = [alien.sun, alien.mon, alien.tue, alien.wed, alien.thu, alien.fri, alien.sat];\n            alien.showBubble = true;\n          });\n          room.initMonsters(aliens);\n          room.start(); // update redux room info\n\n          dispatch(actions.setRoom({\n            roomId,\n            aliens,\n            roomTitle,\n            challenge\n          }));\n        } else {\n          return;\n        }\n\n        res = await api.get(`/chat/${challengeId}`);\n\n        if (res.data.result === \"success\") {\n          const messages = res.data.data;\n          dispatch(actions.setMessage(messages));\n        } else {\n          return;\n        }\n      };\n\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n\n    return () => {\n      room.close();\n    };\n  }, [room, roomId, challengeId, dispatch]); // TODO: 더 효율적으로 수정\n\n  useEffect(() => {\n    if (isSocketOn && participating && room) {\n      socket.receiveMessage(msg => dispatch(actions.setMessage([msg]))); //     socket.usersOnRoom(room.usersOnRoomHandler);\n    }\n\n    return () => {\n      socket.blockMessage();\n    };\n  }, [isSocketOn, challengeId, participating, room, roomId, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ChallengeRoom, \"wFidF9w/viFuzC2Zcxj6wVrcArw=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = ChallengeRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeRoom\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/Room/ChallengeRoom.js"],"names":["React","useEffect","useParams","useSelector","useDispatch","actions","aquarium","api","socket","ChallengeRoom","props","dispatch","params","challengeId","roomId","room","setCurrentRoom","user","isSocketOn","participating","login","challenges","findIndex","c","id","Number","fetchData","res","get","data","result","aliens","challenge","roomTitle","challenge_name","forEach","alien","practiceDays","sun","mon","tue","wed","thu","fri","sat","showBubble","initMonsters","start","setRoom","messages","setMessage","err","console","error","close","receiveMessage","msg","blockMessage"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../../Redux/actions\";\n\nimport aquarium from \"../../../shared\";\nimport api from \"../../../apis\";\nimport * as socket from \"../../../apis/socket\";\n\nexport default function ChallengeRoom(props) {\n  const dispatch = useDispatch();\n  // 챌린지 정보 가져오기\n  let params = useParams();\n  const challengeId = params.challengeId;\n  const roomId = `challenge-${challengeId}`;\n  const room = aquarium.setCurrentRoom(roomId);\n\n  // user 정보 확인\n  const { user, isSocketOn } = useSelector(({ user }) => ({\n    user: user.user,\n    isSocketOn: user.isSocketOn,\n  }));\n  // const userId = user.login && user.id;\n\n  // 본 챌린지에 참가중인지 확인\n  let participating = false;\n  if (user.login && user.challenges) {\n    participating =\n      user.challenges.findIndex((c) => c.id === Number(challengeId)) !== -1;\n  }\n\n  // console.log(\"[ChallengeRoom] is participating?\", participating);\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        let res = await api.get(`/challenge/${challengeId}`);\n        // console.log(\"fetch challenge data\", res.data);\n        if (res.data.result === \"success\") {\n          // rooms 상태 정보\n          const aliens = res.data.aliens;\n          const challenge = res.data.challenge;\n          const roomTitle = `${challenge.challenge_name}`;\n          aliens.forEach((alien) => {\n            alien.practiceDays = [\n              alien.sun,\n              alien.mon,\n              alien.tue,\n              alien.wed,\n              alien.thu,\n              alien.fri,\n              alien.sat,\n            ];\n            alien.showBubble = true;\n          });\n          room.initMonsters(aliens);\n          room.start();\n          // update redux room info\n          dispatch(actions.setRoom({ roomId, aliens, roomTitle, challenge }));\n        } else {\n          return;\n        }\n        res = await api.get(`/chat/${challengeId}`);\n        if (res.data.result === \"success\") {\n          const messages = res.data.data;\n          dispatch(actions.setMessage(messages));\n        } else {\n          return;\n        }\n      };\n      fetchData();\n    } catch (err) {\n      console.error(\"fetchData fail\", err);\n    }\n    return () => {\n      room.close();\n    };\n  }, [room, roomId, challengeId, dispatch]);\n\n  // TODO: 더 효율적으로 수정\n  useEffect(() => {\n    if (isSocketOn && participating && room) {\n      socket.receiveMessage((msg) => dispatch(actions.setMessage([msg])));\n      //     socket.usersOnRoom(room.usersOnRoomHandler);\n    }\n    return () => {\n      socket.blockMessage();\n    };\n  }, [isSocketOn, challengeId, participating, room, roomId, dispatch]);\n\n  return <div></div>;\n}\n"]},"metadata":{},"sourceType":"module"}