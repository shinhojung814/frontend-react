{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/SocketContainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as socket from \"../../apis/socket\";\nimport * as actions from \"../../Redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SocketContainer(props) {\n  _s();\n\n  const {\n    user\n  } = useSelector(({\n    user\n  }) => ({\n    user: user.user\n  }));\n  const dispatch = useDispatch(); // user 정보 중 login, challenges에 변동이 생겼을 때,\n  // 기존 socket을 disconnect하고 새로 생성\n  // (지금은 다른 정보가 바뀔 일이 없으니 user로 통일)\n\n  useEffect(() => {\n    // 1단계: 로그인 상태면 새로 연결\n    if (user.login) {\n      console.log(\"[socket container] step1. login\");\n      socket.init(user);\n      dispatch(actions.toggleSocket(true));\n    } // 2단계: 기존 연결된 것이 있으면 연결을 끊는다.\n    // (상태가 변경되거나 새로고침할 때, 창을 닫을 때)\n\n\n    return () => {\n      console.log(\"[socket container] step2. disconnect\");\n      socket.disconnect();\n    };\n  }, [user, dispatch]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SocketContainer, \"///vX1FZ9qMGkeDNJGCfk9B4ZjU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SocketContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketContainer\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/SocketContainer/index.js"],"names":["React","useEffect","useSelector","useDispatch","socket","actions","SocketContainer","props","user","dispatch","login","console","log","init","toggleSocket","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAWN,WAAW,CAAC,CAAC;AAAEM,IAAAA;AAAF,GAAD,MAAe;AAC1CA,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAD+B,GAAf,CAAD,CAA5B;AAGA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CAJ6C,CAM7C;AACA;AACA;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIO,IAAI,CAACE,KAAT,EAAgB;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAR,MAAAA,MAAM,CAACS,IAAP,CAAYL,IAAZ;AACAC,MAAAA,QAAQ,CAACJ,OAAO,CAACS,YAAR,CAAqB,IAArB,CAAD,CAAR;AACD,KANa,CAQd;AACA;;;AACA,WAAO,MAAM;AACXH,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAR,MAAAA,MAAM,CAACW,UAAP;AACD,KAHD;AAID,GAdQ,EAcN,CAACP,IAAD,EAAOC,QAAP,CAdM,CAAT;AAgBA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA1BuBH,e;UACLJ,W,EAGAC,W;;;KAJKG,e","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as socket from \"../../apis/socket\";\nimport * as actions from \"../../Redux/actions\";\n\nexport default function SocketContainer(props) {\n  const { user } = useSelector(({ user }) => ({\n    user: user.user,\n  }));\n  const dispatch = useDispatch();\n\n  // user 정보 중 login, challenges에 변동이 생겼을 때,\n  // 기존 socket을 disconnect하고 새로 생성\n  // (지금은 다른 정보가 바뀔 일이 없으니 user로 통일)\n  useEffect(() => {\n    // 1단계: 로그인 상태면 새로 연결\n    if (user.login) {\n      console.log(\"[socket container] step1. login\");\n      socket.init(user);\n      dispatch(actions.toggleSocket(true));\n    }\n\n    // 2단계: 기존 연결된 것이 있으면 연결을 끊는다.\n    // (상태가 변경되거나 새로고침할 때, 창을 닫을 때)\n    return () => {\n      console.log(\"[socket container] step2. disconnect\");\n      socket.disconnect();\n    };\n  }, [user, dispatch]);\n\n  return <React.Fragment />;\n}\n"]},"metadata":{},"sourceType":"module"}