{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js\";\nimport React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\"; // import * as socket from \"../../../apis/socket\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Field extends Component {\n  constructor(...args) {\n    super(...args);\n    this.BG_COLORSET = {\n      sunset: [// https://www.color-hex.com/color-palette/40131\n      `rgba(238,175,97,1)`, `rgba(251,144,98,1)`, `rgba(238,93,108,1)`, `rgba(206,73,147,1)`],\n      space: [// https://www.color-hex.com/color-palette/35848\n      `rgba(5,55,123,1)`, `rgba(4,44,98,1)`, `rgba(3,33,74,1)`, `rgba(1,11,25,1)`]\n    };\n\n    this.draw = (ctx, frameCnt, mouseObj) => {\n      // console.log(mouseObj);\n      let cvsWidth = ctx.canvas.width;\n      let cvsHeight = ctx.canvas.height;\n      ctx.save();\n      ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n      if (this.props.room && this.props.room.fieldState) {\n        const room = this.props.room;\n        const {\n          monsters\n        } = room.fieldState; // console.log(111, this.props.room.usersOnRoom);\n        // draw background\n\n        let lingrad = ctx.createLinearGradient(0, 0, 0, cvsHeight);\n        let colorset = this.BG_COLORSET[\"space\"];\n        let pcts = room.camera.getGradientPct();\n        lingrad.addColorStop(0, colorset[0]);\n        lingrad.addColorStop(pcts[0], colorset[1]);\n        lingrad.addColorStop(pcts[1], colorset[2]);\n        lingrad.addColorStop(1, colorset[3]);\n        ctx.fillStyle = lingrad;\n        ctx.fillRect(0, 0, cvsWidth, cvsHeight); // draw source (black hole?)\n        // translate location\n\n        const {\n          center\n        } = room.camera;\n        const {\n          selectedAlien\n        } = this.props;\n\n        if (!!selectedAlien && !!(selectedAlien in monsters)) {\n          let {\n            location\n          } = monsters[selectedAlien];\n          let x = room.camera.getCanvasSize(location.x);\n          let y = room.camera.getCanvasSize(location.y);\n          ctx.translate(cvsWidth / 2 - x, cvsHeight / 2 - y);\n        } else {\n          ctx.translate(cvsWidth / 2 - center.x, cvsHeight / 2 - center.y);\n        } // room.camera.center.x++;\n        // draw monster\n        // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n\n\n        for (const monId in monsters) {\n          let {\n            location,\n            size,\n            color,\n            isUserOnRoom\n          } = monsters[monId];\n          let x = room.camera.getCanvasSize(location.x);\n          let y = room.camera.getCanvasSize(location.y);\n          size = room.camera.getCanvasSize(size);\n          ctx.beginPath();\n          ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n          ctx.fillStyle = color;\n\n          if (isUserOnRoom && frameCnt % 100 <= 40) {\n            ctx.fillStyle = \"tomato\";\n          }\n\n          ctx.fill(); // if (isUserOnRoom) {\n          //   ctx.beginPath();\n          //   ctx.arc(x, y, 8, 0, Math.PI * 2);\n          //   ctx.fillStyle = \"tomato\";\n          //   ctx.fill();\n          // }\n        }\n\n        if (mouseObj.clicked) {// let destination = {\n          //   x: mouseObj.deltaXfromCenter,\n          //   y: mouseObj.deltaYfromCenter,\n          // };\n          // destination = room.camera.getLocalFromMouse(destination);\n          // socket.changeDestination(room.roomId, destination);\n        }\n      }\n\n      ctx.restore();\n    };\n  }\n\n  render() {\n    if (this.props.room) {\n      const camera = this.props.room.camera;\n      return /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.draw,\n        onMouseDown: camera.onMouseDown,\n        onMouseMove: camera.onMouseMove,\n        onMouseUp: camera.onMouseUp,\n        onTouchStart: camera.onTouchStart,\n        onTouchMove: camera.onTouchMove,\n        onTouchEnd: camera.onTouchEnd,\n        onWheel: camera.onWheel,\n        onResize: camera.onResize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uB85C\\uB529\\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js"],"names":["React","Component","Canvas","Field","BG_COLORSET","sunset","space","draw","ctx","frameCnt","mouseObj","cvsWidth","canvas","width","cvsHeight","height","save","clearRect","props","room","fieldState","monsters","lingrad","createLinearGradient","colorset","pcts","camera","getGradientPct","addColorStop","fillStyle","fillRect","center","selectedAlien","location","x","getCanvasSize","y","translate","monId","size","color","isUserOnRoom","beginPath","arc","Math","PI","fill","clicked","restore","render","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onWheel","onResize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\";\n\n// import * as socket from \"../../../apis/socket\";\n\nexport default class Field extends Component {\n  BG_COLORSET = {\n    sunset: [\n      // https://www.color-hex.com/color-palette/40131\n      `rgba(238,175,97,1)`,\n      `rgba(251,144,98,1)`,\n      `rgba(238,93,108,1)`,\n      `rgba(206,73,147,1)`,\n    ],\n    space: [\n      // https://www.color-hex.com/color-palette/35848\n      `rgba(5,55,123,1)`,\n      `rgba(4,44,98,1)`,\n      `rgba(3,33,74,1)`,\n      `rgba(1,11,25,1)`,\n    ],\n  };\n\n  draw = (ctx, frameCnt, mouseObj) => {\n    // console.log(mouseObj);\n    let cvsWidth = ctx.canvas.width;\n    let cvsHeight = ctx.canvas.height;\n    ctx.save();\n    ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n    if (this.props.room && this.props.room.fieldState) {\n      const room = this.props.room;\n      const { monsters } = room.fieldState;\n      // console.log(111, this.props.room.usersOnRoom);\n\n      // draw background\n      let lingrad = ctx.createLinearGradient(0, 0, 0, cvsHeight);\n      let colorset = this.BG_COLORSET[\"space\"];\n      let pcts = room.camera.getGradientPct();\n      lingrad.addColorStop(0, colorset[0]);\n      lingrad.addColorStop(pcts[0], colorset[1]);\n      lingrad.addColorStop(pcts[1], colorset[2]);\n      lingrad.addColorStop(1, colorset[3]);\n      ctx.fillStyle = lingrad;\n      ctx.fillRect(0, 0, cvsWidth, cvsHeight);\n\n      // draw source (black hole?)\n\n      // translate location\n      const { center } = room.camera;\n      const { selectedAlien } = this.props;\n      if (!!selectedAlien && !!(selectedAlien in monsters)) {\n        let { location } = monsters[selectedAlien];\n        let x = room.camera.getCanvasSize(location.x);\n        let y = room.camera.getCanvasSize(location.y);\n        ctx.translate(cvsWidth / 2 - x, cvsHeight / 2 - y);\n      } else {\n        ctx.translate(cvsWidth / 2 - center.x, cvsHeight / 2 - center.y);\n      }\n\n      // room.camera.center.x++;\n\n      // draw monster\n      // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n      for (const monId in monsters) {\n        let { location, size, color, isUserOnRoom } = monsters[monId];\n        let x = room.camera.getCanvasSize(location.x);\n        let y = room.camera.getCanvasSize(location.y);\n        size = room.camera.getCanvasSize(size);\n\n        ctx.beginPath();\n        ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        if (isUserOnRoom && frameCnt % 100 <= 40) {\n          ctx.fillStyle = \"tomato\";\n        }\n        ctx.fill();\n\n        // if (isUserOnRoom) {\n        //   ctx.beginPath();\n        //   ctx.arc(x, y, 8, 0, Math.PI * 2);\n        //   ctx.fillStyle = \"tomato\";\n        //   ctx.fill();\n        // }\n      }\n\n      if (mouseObj.clicked) {\n        // let destination = {\n        //   x: mouseObj.deltaXfromCenter,\n        //   y: mouseObj.deltaYfromCenter,\n        // };\n        // destination = room.camera.getLocalFromMouse(destination);\n        // socket.changeDestination(room.roomId, destination);\n      }\n    }\n\n    ctx.restore();\n  };\n\n  render() {\n    if (this.props.room) {\n      const camera = this.props.room.camera;\n      return (\n        <Canvas\n          draw={this.draw}\n          onMouseDown={camera.onMouseDown}\n          onMouseMove={camera.onMouseMove}\n          onMouseUp={camera.onMouseUp}\n          onTouchStart={camera.onTouchStart}\n          onTouchMove={camera.onTouchMove}\n          onTouchEnd={camera.onTouchEnd}\n          onWheel={camera.onWheel}\n          onResize={camera.onResize}\n        />\n      );\n    } else {\n      return <div>로딩중...</div>;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}