{"ast":null,"code":"import Vector2D from \"../lib/Vector2D.js\";\nimport { S3URL } from \"../lib/Constants.js\";\n\nclass Monster {\n  constructor(props) {\n    this.userId = props.userId;\n    this.monId = props.monId;\n    this.isUserOnRoom = false;\n    this.authCnt = props.authCnt || 0;\n    this.wanderRange = props.wanderRange;\n    this.color = props.color;\n    this.size = 40 + this.authCnt * 2; // Alien_base/fish_0.png-Alien_base/fish_0_reverse.png-4-3-1992-981\n    //          0                      1                   2 3  4    5\n    // TODO: 임시처리된 코드 개선\n\n    let parsed = props.image_url && props.image_url.split(\"-\");\n\n    if (parsed && parsed[0].startsWith(\"Alien_base\")) {\n      this.image_url = parsed;\n    }\n\n    this.init();\n  }\n\n  init() {\n    // generate random monster\n    this.location = this.getRandLocation();\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.acceleration = {\n      x: 0,\n      y: 0\n    };\n    this.maxSpeed = 2;\n    this.maxForce = 0.2;\n    this.seekLimit = 50;\n    this.defaultAngle = -Math.PI / 2;\n    this.angle = this.defaultAngle;\n    this.destination = { ...this.location\n    }; // this.color = this.getRandomColor();\n    // for sprite images\n\n    if (this.image_url) {\n      this.spriteWidth = this.image_url[4] / this.image_url[2];\n      this.spriteHeight = this.image_url[5] / this.image_url[3];\n      this.spriteAngle = 0;\n      this.frameX = Math.floor(Math.random() * this.image_url[2]); // 0~3\n\n      this.frameY = Math.floor(Math.random() * this.image_url[3]); // 0~2\n\n      this.fishLeft = new Image();\n      this.fishLeft.src = S3URL + this.image_url[0];\n      this.fishRight = new Image();\n      this.fishRight.src = S3URL + this.image_url[1];\n      this.bubble = new Image();\n      this.bubble.src = require('../../image/bubble-512px-red.png').default; // this.bubble.src = require('../../image/bubble-512px.png').default;\n    }\n  }\n\n  overwrite(monPlain) {\n    for (const property in monPlain) {\n      this[property] = monPlain[property];\n    }\n  }\n\n  sync(monPlain) {\n    // temp\n    this.destination = monPlain.destination;\n    this.size = monPlain.size;\n  }\n\n  getRandLocation() {\n    let randRange = 300;\n    let x = (Math.random() - 0.5) * randRange;\n    let y = (Math.random() - 0.5) * randRange;\n    return {\n      x,\n      y\n    };\n  }\n\n  calculateFrames(frameCnt) {\n    if (frameCnt % 10 === 0) {\n      this.frameX++;\n      this.frameY += this.frameX === parseInt(this.image_url[2]) ? 1 : 0;\n      this.frameX %= this.image_url[2];\n      this.frameY %= this.image_url[3];\n    }\n  }\n\n  display(ctx, frameCnt, room) {\n    let x = room.camera.getCanvasSize(this.location.x);\n    let y = room.camera.getCanvasSize(this.location.y);\n    let size = room.camera.getCanvasSize(this.size); // // draw circle\n    // ctx.beginPath();\n    // ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n    // ctx.fillStyle = this.color;\n    // if (this.isUserOnRoom && frameCnt % 100 <= 40) {\n    //   ctx.fillStyle = \"tomato\";\n    // }\n    // ctx.fill();\n    // draw sprite images\n\n    if (this.image_url) {\n      this.calculateFrames(frameCnt);\n      ctx.save();\n      ctx.translate(x, y);\n      let direction = this.location.x - this.destination.x;\n      ctx.rotate(this.spriteAngle);\n\n      if (direction > 0) {\n        ctx.drawImage(this.fishLeft, this.frameX * this.spriteWidth, this.frameY * this.spriteHeight, this.spriteWidth, this.spriteHeight, -size / 2, -size / 2, size, size);\n      } else {\n        ctx.drawImage(this.fishRight, this.frameX * this.spriteWidth, this.frameY * this.spriteHeight, this.spriteWidth, this.spriteHeight, -size / 2, -size / 2, size, size);\n      } // ctx.drawImage(this.bubble,-size / 2,-size / 2, size, size);\n\n\n      ctx.restore();\n    }\n  }\n\n  run() {\n    let force = this.seek(this.destination);\n    this.applyForce(force);\n    this.update();\n  }\n\n  seek(target) {\n    let desired = {\n      x: target.x,\n      y: target.y\n    };\n    Vector2D.sub(desired, this.location);\n    let dx = this.location.x - target.x;\n    let dy = this.location.y - target.y;\n    this.spriteAngle = Math.atan2(dy, dx);\n    let angleBase = this.spriteAngle - Math.PI; // let angleBase = Math.atan2(dy, dx) - Math.PI;\n\n    let dist = Vector2D.getMag(desired);\n    Vector2D.normalize(desired);\n\n    if (dist < this.seekLimit) {\n      let speed = dist / this.seekLimit * this.maxSpeed;\n      let da = this.defaultAngle;\n      Vector2D.mult(desired, speed);\n      this.angle = da - (da - angleBase) * (dist / this.seekLimit);\n    } else {\n      Vector2D.mult(desired, this.maxSpeed);\n      this.angle = angleBase;\n    }\n\n    Vector2D.sub(desired, this.velocity);\n    Vector2D.limit(desired, this.maxForce);\n    return desired;\n  }\n\n  applyForce(force) {\n    Vector2D.add(this.acceleration, force);\n  }\n\n  update() {\n    Vector2D.add(this.velocity, this.acceleration);\n    Vector2D.limit(this.velocity, this.maxSpeed);\n    Vector2D.mult(this.velocity, 0.99);\n    Vector2D.add(this.location, this.velocity);\n    Vector2D.mult(this.acceleration, 0);\n  }\n\n  directUpdate(features) {\n    // TODO: refactoring logic\n    for (const key in features) {\n      this[key] = features[key];\n    }\n  }\n\n  getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n\n}\n\nexport default Monster;","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/shared/creature/Monster.js"],"names":["Vector2D","S3URL","Monster","constructor","props","userId","monId","isUserOnRoom","authCnt","wanderRange","color","size","parsed","image_url","split","startsWith","init","location","getRandLocation","velocity","x","y","acceleration","maxSpeed","maxForce","seekLimit","defaultAngle","Math","PI","angle","destination","spriteWidth","spriteHeight","spriteAngle","frameX","floor","random","frameY","fishLeft","Image","src","fishRight","bubble","require","default","overwrite","monPlain","property","sync","randRange","calculateFrames","frameCnt","parseInt","display","ctx","room","camera","getCanvasSize","save","translate","direction","rotate","drawImage","restore","run","force","seek","applyForce","update","target","desired","sub","dx","dy","atan2","angleBase","dist","getMag","normalize","speed","da","mult","limit","add","directUpdate","features","key","getRandomColor","letters","i"],"mappings":"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","sourcesContent":["import Vector2D from \"../lib/Vector2D.js\";\nimport { S3URL } from \"../lib/Constants.js\";\n\nclass Monster {\n  constructor(props) {\n    this.userId = props.userId;\n    this.monId = props.monId;\n    this.isUserOnRoom = false;\n    this.authCnt = props.authCnt || 0;\n    this.wanderRange = props.wanderRange;\n    this.color = props.color;\n    this.size = 40 + this.authCnt * 2;\n\n    // Alien_base/fish_0.png-Alien_base/fish_0_reverse.png-4-3-1992-981\n    //          0                      1                   2 3  4    5\n    // TODO: 임시처리된 코드 개선\n    let parsed = props.image_url && props.image_url.split(\"-\");\n    if (parsed && parsed[0].startsWith(\"Alien_base\")) {\n      this.image_url = parsed;\n    }\n    this.init();\n  }\n\n  init() {\n    // generate random monster\n    this.location = this.getRandLocation();\n    this.velocity = { x: 0, y: 0 };\n    this.acceleration = { x: 0, y: 0 };\n\n    this.maxSpeed = 2;\n    this.maxForce = 0.2;\n    this.seekLimit = 50;\n\n    this.defaultAngle = -Math.PI / 2;\n    this.angle = this.defaultAngle;\n\n    this.destination = { ...this.location };\n    // this.color = this.getRandomColor();\n\n    // for sprite images\n    if (this.image_url) {\n      this.spriteWidth = this.image_url[4] / this.image_url[2];\n      this.spriteHeight = this.image_url[5] / this.image_url[3];\n      this.spriteAngle = 0;\n      this.frameX = Math.floor(Math.random() * this.image_url[2]); // 0~3\n      this.frameY = Math.floor(Math.random() * this.image_url[3]); // 0~2\n      this.fishLeft = new Image();\n      this.fishLeft.src = S3URL + this.image_url[0];\n      this.fishRight = new Image();\n      this.fishRight.src = S3URL + this.image_url[1];\n      this.bubble = new Image();\n      this.bubble.src = require('../../image/bubble-512px-red.png').default;\n      // this.bubble.src = require('../../image/bubble-512px.png').default;\n    }\n  }\n\n  overwrite(monPlain) {\n    for (const property in monPlain) {\n      this[property] = monPlain[property];\n    }\n  }\n\n  sync(monPlain) {\n    // temp\n    this.destination = monPlain.destination;\n    this.size = monPlain.size;\n  }\n\n  getRandLocation() {\n    let randRange = 300;\n    let x = (Math.random() - 0.5) * randRange;\n    let y = (Math.random() - 0.5) * randRange;\n    return { x, y };\n  }\n\n  calculateFrames(frameCnt) {\n    if (frameCnt % 10 === 0) {\n      this.frameX++;\n      this.frameY += this.frameX === parseInt(this.image_url[2]) ? 1 : 0;\n      this.frameX %= this.image_url[2];\n      this.frameY %= this.image_url[3];\n    }\n  }\n\n  display(ctx, frameCnt, room) {\n    let x = room.camera.getCanvasSize(this.location.x);\n    let y = room.camera.getCanvasSize(this.location.y);\n    let size = room.camera.getCanvasSize(this.size);\n\n    // // draw circle\n    // ctx.beginPath();\n    // ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n    // ctx.fillStyle = this.color;\n    // if (this.isUserOnRoom && frameCnt % 100 <= 40) {\n    //   ctx.fillStyle = \"tomato\";\n    // }\n    // ctx.fill();\n\n    // draw sprite images\n    if (this.image_url) {\n      this.calculateFrames(frameCnt);\n      ctx.save();\n      ctx.translate(x, y);\n      let direction = this.location.x - this.destination.x;\n      ctx.rotate(this.spriteAngle);\n      if (direction > 0) {\n        ctx.drawImage(\n          this.fishLeft,\n          this.frameX * this.spriteWidth,\n          this.frameY * this.spriteHeight,\n          this.spriteWidth,\n          this.spriteHeight,\n          -size / 2,\n          -size / 2,\n          size,\n          size\n        );\n      } else {\n        ctx.drawImage(\n          this.fishRight,\n          this.frameX * this.spriteWidth,\n          this.frameY * this.spriteHeight,\n          this.spriteWidth,\n          this.spriteHeight,\n          -size / 2,\n          -size / 2,\n          size,\n          size\n        );\n      }\n      // ctx.drawImage(this.bubble,-size / 2,-size / 2, size, size);\n      ctx.restore();\n    }\n  }\n\n  run() {\n    let force = this.seek(this.destination);\n    this.applyForce(force);\n    this.update();\n  }\n\n  seek(target) {\n    let desired = { x: target.x, y: target.y };\n    Vector2D.sub(desired, this.location);\n\n    let dx = this.location.x - target.x;\n    let dy = this.location.y - target.y;\n    this.spriteAngle = Math.atan2(dy, dx);\n    let angleBase = this.spriteAngle - Math.PI;\n    // let angleBase = Math.atan2(dy, dx) - Math.PI;\n\n    let dist = Vector2D.getMag(desired);\n    Vector2D.normalize(desired);\n    if (dist < this.seekLimit) {\n      let speed = (dist / this.seekLimit) * this.maxSpeed;\n      let da = this.defaultAngle;\n      Vector2D.mult(desired, speed);\n      this.angle = da - (da - angleBase) * (dist / this.seekLimit);\n    } else {\n      Vector2D.mult(desired, this.maxSpeed);\n      this.angle = angleBase;\n    }\n\n    Vector2D.sub(desired, this.velocity);\n    Vector2D.limit(desired, this.maxForce);\n\n    return desired;\n  }\n\n  applyForce(force) {\n    Vector2D.add(this.acceleration, force);\n  }\n\n  update() {\n    Vector2D.add(this.velocity, this.acceleration);\n    Vector2D.limit(this.velocity, this.maxSpeed);\n    Vector2D.mult(this.velocity, 0.99);\n    Vector2D.add(this.location, this.velocity);\n    Vector2D.mult(this.acceleration, 0);\n  }\n\n  directUpdate(features) {\n    // TODO: refactoring logic\n    for (const key in features) {\n      this[key] = features[key];\n    }\n  }\n\n  getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n}\n\nexport default Monster;\n"]},"metadata":{},"sourceType":"module"}