{"ast":null,"code":"import Vector2D from \"../lib/Vector2D.js\";\n\nclass Monster {\n  constructor(props) {\n    // TODO\n    this.userId = props.userId;\n    this.monId = props.monId;\n    this.isUserOnRoom = false;\n    this.init();\n    if (!!props.color) this.color = props.color;\n    if (!!props.authCnt) this.size = 20 + props.authCnt * 2;\n  }\n\n  init() {\n    // generate random monster\n    this.location = this.getRandLocation();\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.acceleration = {\n      x: 0,\n      y: 0\n    };\n    this.maxSpeed = 2;\n    this.maxForce = 0.2;\n    this.seekLimit = 50;\n    this.defaultAngle = -Math.PI / 2;\n    this.angle = this.defaultAngle;\n    this.destination = { ...this.location\n    };\n    this.size = 50 + Math.random() * 100;\n    this.color = this.getRandomColor();\n  }\n\n  overwrite(monPlain) {\n    for (const property in monPlain) {\n      this[property] = monPlain[property];\n    }\n  }\n\n  sync(monPlain) {\n    // temp\n    this.destination = monPlain.destination;\n    this.size = monPlain.size;\n  }\n\n  getRandLocation() {\n    let randRange = 300;\n    let x = (Math.random() - 0.5) * randRange;\n    let y = (Math.random() - 0.5) * randRange;\n    return {\n      x,\n      y\n    };\n  }\n\n  run() {\n    let force = this.seek(this.destination);\n    this.applyForce(force);\n    this.update();\n  }\n\n  seek(target) {\n    let desired = {\n      x: target.x,\n      y: target.y\n    };\n    Vector2D.sub(desired, this.location);\n    let dx = this.location.x - target.x;\n    let dy = this.location.y - target.y;\n    let angleBase = Math.atan2(dy, dx) - Math.PI;\n    let dist = Vector2D.getMag(desired);\n    Vector2D.normalize(desired);\n\n    if (dist < this.seekLimit) {\n      let speed = dist / this.seekLimit * this.maxSpeed;\n      let da = this.defaultAngle;\n      Vector2D.mult(desired, speed);\n      this.angle = da - (da - angleBase) * (dist / this.seekLimit);\n    } else {\n      Vector2D.mult(desired, this.maxSpeed);\n      this.angle = angleBase;\n    }\n\n    Vector2D.sub(desired, this.velocity);\n    Vector2D.limit(desired, this.maxForce);\n    return desired;\n  }\n\n  applyForce(force) {\n    Vector2D.add(this.acceleration, force);\n  }\n\n  update() {\n    Vector2D.add(this.velocity, this.acceleration);\n    Vector2D.limit(this.velocity, this.maxSpeed);\n    Vector2D.mult(this.velocity, 0.99);\n    Vector2D.add(this.location, this.velocity);\n    Vector2D.mult(this.acceleration, 0);\n  }\n\n  directUpdate(features) {\n    // TODO: refactoring logic\n    for (const key in features) {\n      this[key] = features[key];\n    }\n  }\n\n  getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n\n}\n\nexport default Monster;","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/shared/creature/Monster.js"],"names":["Vector2D","Monster","constructor","props","userId","monId","isUserOnRoom","init","color","authCnt","size","location","getRandLocation","velocity","x","y","acceleration","maxSpeed","maxForce","seekLimit","defaultAngle","Math","PI","angle","destination","random","getRandomColor","overwrite","monPlain","property","sync","randRange","run","force","seek","applyForce","update","target","desired","sub","dx","dy","angleBase","atan2","dist","getMag","normalize","speed","da","mult","limit","add","directUpdate","features","key","letters","i","floor"],"mappings":"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","sourcesContent":["import Vector2D from \"../lib/Vector2D.js\";\n\nclass Monster {\n  constructor(props) {\n    // TODO\n    this.userId = props.userId;\n    this.monId = props.monId;\n    this.isUserOnRoom = false;\n    this.init();\n    if (!!props.color) this.color = props.color;\n    if (!!props.authCnt) this.size = 20 + props.authCnt * 2;\n  }\n\n  init() {\n    // generate random monster\n    this.location = this.getRandLocation();\n    this.velocity = { x: 0, y: 0 };\n    this.acceleration = { x: 0, y: 0 };\n\n    this.maxSpeed = 2;\n    this.maxForce = 0.2;\n    this.seekLimit = 50;\n\n    this.defaultAngle = -Math.PI / 2;\n    this.angle = this.defaultAngle;\n\n    this.destination = { ...this.location };\n    this.size = 50 + Math.random() * 100;\n    this.color = this.getRandomColor();\n  }\n\n  overwrite(monPlain) {\n    for (const property in monPlain) {\n      this[property] = monPlain[property];\n    }\n  }\n\n  sync(monPlain) {\n    // temp\n    this.destination = monPlain.destination;\n    this.size = monPlain.size;\n  }\n\n  getRandLocation() {\n    let randRange = 300;\n    let x = (Math.random() - 0.5) * randRange;\n    let y = (Math.random() - 0.5) * randRange;\n    return { x, y };\n  }\n\n  run() {\n    let force = this.seek(this.destination);\n    this.applyForce(force);\n    this.update();\n  }\n\n  seek(target) {\n    let desired = { x: target.x, y: target.y };\n    Vector2D.sub(desired, this.location);\n\n    let dx = this.location.x - target.x;\n    let dy = this.location.y - target.y;\n    let angleBase = Math.atan2(dy, dx) - Math.PI;\n\n    let dist = Vector2D.getMag(desired);\n    Vector2D.normalize(desired);\n    if (dist < this.seekLimit) {\n      let speed = (dist / this.seekLimit) * this.maxSpeed;\n      let da = this.defaultAngle;\n      Vector2D.mult(desired, speed);\n      this.angle = da - (da - angleBase) * (dist / this.seekLimit);\n    } else {\n      Vector2D.mult(desired, this.maxSpeed);\n      this.angle = angleBase;\n    }\n\n    Vector2D.sub(desired, this.velocity);\n    Vector2D.limit(desired, this.maxForce);\n\n    return desired;\n  }\n\n  applyForce(force) {\n    Vector2D.add(this.acceleration, force);\n  }\n\n  update() {\n    Vector2D.add(this.velocity, this.acceleration);\n    Vector2D.limit(this.velocity, this.maxSpeed);\n    Vector2D.mult(this.velocity, 0.99);\n    Vector2D.add(this.location, this.velocity);\n    Vector2D.mult(this.acceleration, 0);\n  }\n\n  directUpdate(features) {\n    // TODO: refactoring logic\n    for (const key in features) {\n      this[key] = features[key];\n    }\n  }\n\n  getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n}\n\nexport default Monster;\n"]},"metadata":{},"sourceType":"module"}