{"ast":null,"code":"import Vector2D from \"../lib/Vector2D.js\";\nconst S3URL = \"https://namu-alien-s3.s3.ap-northeast-2.amazonaws.com/\";\n\nclass Monster {\n  constructor(props) {\n    // TODO\n    this.userId = props.userId;\n    this.monId = props.monId;\n    this.isUserOnRoom = false; // Alien_base/fish_0.png-Alien_base/fish_0_reverse.png-4-3-1992-981\n    //          0                      1                   2 3  4    5\n\n    if (props.image_url) this.image_url = props.image_url.split(\"-\");\n    this.init();\n    if (!!props.color) this.color = props.color;\n    if (!!props.authCnt) this.size = 20 + props.authCnt * 2;\n  }\n\n  init() {\n    // generate random monster\n    this.location = this.getRandLocation();\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    this.acceleration = {\n      x: 0,\n      y: 0\n    };\n    this.maxSpeed = 2;\n    this.maxForce = 0.2;\n    this.seekLimit = 50;\n    this.defaultAngle = -Math.PI / 2;\n    this.angle = this.defaultAngle;\n    this.destination = { ...this.location\n    };\n    this.size = 50 + Math.random() * 100;\n    this.color = this.getRandomColor(); // for sprite images\n\n    if (this.image_url) {\n      this.spriteWidth = this.image_url[4] / this.image_url[2];\n      this.spriteHeight = this.image_url[5] / this.image_url[3];\n      this.spriteAngle = 0;\n      this.frameX = Math.floor(Math.random() * this.image_url[2]); // 0~3\n\n      this.frameY = Math.floor(Math.random() * this.image_url[3]); // 0~2\n\n      this.fishLeft = new Image();\n      this.fishLeft.src = S3URL + this.image_url[0];\n      this.fishRight = new Image();\n      this.fishRight.src = S3URL + this.image_url[1];\n    }\n  }\n\n  overwrite(monPlain) {\n    for (const property in monPlain) {\n      this[property] = monPlain[property];\n    }\n  }\n\n  sync(monPlain) {\n    // temp\n    this.destination = monPlain.destination;\n    this.size = monPlain.size;\n  }\n\n  getRandLocation() {\n    let randRange = 300;\n    let x = (Math.random() - 0.5) * randRange;\n    let y = (Math.random() - 0.5) * randRange;\n    return {\n      x,\n      y\n    };\n  }\n\n  calculateFrames(frameCnt) {\n    if (frameCnt % 10 === 0) {\n      this.frameX++;\n      this.frameY += this.frameX === parseInt(this.image_url[2]) ? 1 : 0;\n      this.frameX %= this.image_url[2];\n      this.frameY %= this.image_url[3];\n    }\n  }\n\n  display(ctx, frameCnt, room) {\n    let x = room.camera.getCanvasSize(this.location.x);\n    let y = room.camera.getCanvasSize(this.location.y);\n    let size = room.camera.getCanvasSize(this.size); // draw circle\n\n    ctx.beginPath();\n    ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n\n    if (this.isUserOnRoom && frameCnt % 100 <= 40) {\n      ctx.fillStyle = \"tomato\";\n    }\n\n    ctx.fill(); // draw sprite images\n\n    if (this.image_url) {\n      this.calculateFrames(frameCnt);\n      ctx.save();\n      ctx.translate(x, y);\n      let direction = this.location.x - this.destination.x;\n      ctx.rotate(this.spriteAngle);\n\n      if (direction > 0) {\n        ctx.drawImage(this.fishLeft, this.frameX * this.spriteWidth, this.frameY * this.spriteHeight, this.spriteWidth, this.spriteHeight, -size / 2, -size / 2, size, size);\n      } else {\n        ctx.drawImage(this.fishRight, this.frameX * this.spriteWidth, this.frameY * this.spriteHeight, this.spriteWidth, this.spriteHeight, -size / 2, -size / 2, size, size);\n      }\n\n      ctx.restore();\n    }\n  }\n\n  run() {\n    let force = this.seek(this.destination);\n    this.applyForce(force);\n    this.update();\n  }\n\n  seek(target) {\n    let desired = {\n      x: target.x,\n      y: target.y\n    };\n    Vector2D.sub(desired, this.location);\n    let dx = this.location.x - target.x;\n    let dy = this.location.y - target.y;\n    this.spriteAngle = Math.atan2(dy, dx);\n    let angleBase = this.spriteAngle - Math.PI; // let angleBase = Math.atan2(dy, dx) - Math.PI;\n\n    let dist = Vector2D.getMag(desired);\n    Vector2D.normalize(desired);\n\n    if (dist < this.seekLimit) {\n      let speed = dist / this.seekLimit * this.maxSpeed;\n      let da = this.defaultAngle;\n      Vector2D.mult(desired, speed);\n      this.angle = da - (da - angleBase) * (dist / this.seekLimit);\n    } else {\n      Vector2D.mult(desired, this.maxSpeed);\n      this.angle = angleBase;\n    }\n\n    Vector2D.sub(desired, this.velocity);\n    Vector2D.limit(desired, this.maxForce);\n    return desired;\n  }\n\n  applyForce(force) {\n    Vector2D.add(this.acceleration, force);\n  }\n\n  update() {\n    Vector2D.add(this.velocity, this.acceleration);\n    Vector2D.limit(this.velocity, this.maxSpeed);\n    Vector2D.mult(this.velocity, 0.99);\n    Vector2D.add(this.location, this.velocity);\n    Vector2D.mult(this.acceleration, 0);\n  }\n\n  directUpdate(features) {\n    // TODO: refactoring logic\n    for (const key in features) {\n      this[key] = features[key];\n    }\n  }\n\n  getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n\n}\n\nexport default Monster;","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/shared/creature/Monster.js"],"names":["Vector2D","S3URL","Monster","constructor","props","userId","monId","isUserOnRoom","image_url","split","init","color","authCnt","size","location","getRandLocation","velocity","x","y","acceleration","maxSpeed","maxForce","seekLimit","defaultAngle","Math","PI","angle","destination","random","getRandomColor","spriteWidth","spriteHeight","spriteAngle","frameX","floor","frameY","fishLeft","Image","src","fishRight","overwrite","monPlain","property","sync","randRange","calculateFrames","frameCnt","parseInt","display","ctx","room","camera","getCanvasSize","beginPath","arc","fillStyle","fill","save","translate","direction","rotate","drawImage","restore","run","force","seek","applyForce","update","target","desired","sub","dx","dy","atan2","angleBase","dist","getMag","normalize","speed","da","mult","limit","add","directUpdate","features","key","letters","i"],"mappings":"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","sourcesContent":["import Vector2D from \"../lib/Vector2D.js\";\n\nconst S3URL = \"https://namu-alien-s3.s3.ap-northeast-2.amazonaws.com/\";\n\nclass Monster {\n  constructor(props) {\n    // TODO\n    this.userId = props.userId;\n    this.monId = props.monId;\n    this.isUserOnRoom = false;\n    // Alien_base/fish_0.png-Alien_base/fish_0_reverse.png-4-3-1992-981\n    //          0                      1                   2 3  4    5\n    if (props.image_url) this.image_url = props.image_url.split(\"-\");\n    this.init();\n    if (!!props.color) this.color = props.color;\n    if (!!props.authCnt) this.size = 20 + props.authCnt * 2;\n  }\n\n  init() {\n    // generate random monster\n    this.location = this.getRandLocation();\n    this.velocity = { x: 0, y: 0 };\n    this.acceleration = { x: 0, y: 0 };\n\n    this.maxSpeed = 2;\n    this.maxForce = 0.2;\n    this.seekLimit = 50;\n\n    this.defaultAngle = -Math.PI / 2;\n    this.angle = this.defaultAngle;\n\n    this.destination = { ...this.location };\n    this.size = 50 + Math.random() * 100;\n    this.color = this.getRandomColor();\n\n    // for sprite images\n    if (this.image_url) {\n      this.spriteWidth = this.image_url[4] / this.image_url[2];\n      this.spriteHeight = this.image_url[5] / this.image_url[3];\n      this.spriteAngle = 0;\n      this.frameX = Math.floor(Math.random() * this.image_url[2]); // 0~3\n      this.frameY = Math.floor(Math.random() * this.image_url[3]); // 0~2\n      this.fishLeft = new Image();\n      this.fishLeft.src = S3URL + this.image_url[0];\n      this.fishRight = new Image();\n      this.fishRight.src = S3URL + this.image_url[1];\n    }\n  }\n\n  overwrite(monPlain) {\n    for (const property in monPlain) {\n      this[property] = monPlain[property];\n    }\n  }\n\n  sync(monPlain) {\n    // temp\n    this.destination = monPlain.destination;\n    this.size = monPlain.size;\n  }\n\n  getRandLocation() {\n    let randRange = 300;\n    let x = (Math.random() - 0.5) * randRange;\n    let y = (Math.random() - 0.5) * randRange;\n    return { x, y };\n  }\n\n  calculateFrames(frameCnt) {\n    if (frameCnt % 10 === 0) {\n      this.frameX++;\n      this.frameY += this.frameX === parseInt(this.image_url[2]) ? 1 : 0;\n      this.frameX %= this.image_url[2];\n      this.frameY %= this.image_url[3];\n    }\n  }\n\n  display(ctx, frameCnt, room) {\n    let x = room.camera.getCanvasSize(this.location.x);\n    let y = room.camera.getCanvasSize(this.location.y);\n    let size = room.camera.getCanvasSize(this.size);\n\n    // draw circle\n    ctx.beginPath();\n    ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    if (this.isUserOnRoom && frameCnt % 100 <= 40) {\n      ctx.fillStyle = \"tomato\";\n    }\n    ctx.fill();\n\n    // draw sprite images\n    if (this.image_url) {\n      this.calculateFrames(frameCnt);\n      ctx.save();\n      ctx.translate(x, y);\n      let direction = this.location.x - this.destination.x;\n      ctx.rotate(this.spriteAngle);\n      if (direction > 0) {\n        ctx.drawImage(\n          this.fishLeft,\n          this.frameX * this.spriteWidth,\n          this.frameY * this.spriteHeight,\n          this.spriteWidth,\n          this.spriteHeight,\n          -size / 2,\n          -size / 2,\n          size,\n          size\n        );\n      } else {\n        ctx.drawImage(\n          this.fishRight,\n          this.frameX * this.spriteWidth,\n          this.frameY * this.spriteHeight,\n          this.spriteWidth,\n          this.spriteHeight,\n          -size / 2,\n          -size / 2,\n          size,\n          size\n        );\n      }\n      ctx.restore();\n    }\n  }\n\n  run() {\n    let force = this.seek(this.destination);\n    this.applyForce(force);\n    this.update();\n  }\n\n  seek(target) {\n    let desired = { x: target.x, y: target.y };\n    Vector2D.sub(desired, this.location);\n\n    let dx = this.location.x - target.x;\n    let dy = this.location.y - target.y;\n    this.spriteAngle = Math.atan2(dy, dx);\n    let angleBase = this.spriteAngle - Math.PI;\n    // let angleBase = Math.atan2(dy, dx) - Math.PI;\n\n    let dist = Vector2D.getMag(desired);\n    Vector2D.normalize(desired);\n    if (dist < this.seekLimit) {\n      let speed = (dist / this.seekLimit) * this.maxSpeed;\n      let da = this.defaultAngle;\n      Vector2D.mult(desired, speed);\n      this.angle = da - (da - angleBase) * (dist / this.seekLimit);\n    } else {\n      Vector2D.mult(desired, this.maxSpeed);\n      this.angle = angleBase;\n    }\n\n    Vector2D.sub(desired, this.velocity);\n    Vector2D.limit(desired, this.maxForce);\n\n    return desired;\n  }\n\n  applyForce(force) {\n    Vector2D.add(this.acceleration, force);\n  }\n\n  update() {\n    Vector2D.add(this.velocity, this.acceleration);\n    Vector2D.limit(this.velocity, this.maxSpeed);\n    Vector2D.mult(this.velocity, 0.99);\n    Vector2D.add(this.location, this.velocity);\n    Vector2D.mult(this.acceleration, 0);\n  }\n\n  directUpdate(features) {\n    // TODO: refactoring logic\n    for (const key in features) {\n      this[key] = features[key];\n    }\n  }\n\n  getRandomColor() {\n    const letters = \"0123456789ABCDEF\";\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n}\n\nexport default Monster;\n"]},"metadata":{},"sourceType":"module"}