{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/modals/SignUpModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Container, Form, Modal } from \"react-bootstrap\";\nimport HorizonLine from \"../components/HorizonLine.js\";\nimport * as api from \"../apis/index.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignUpModal = ({\n  show,\n  onHide,\n  setSignUpModalOn,\n  setLoginStatus\n}) => {\n  _s();\n\n  // const [showSignUp, setShowSignUp] = useState(true);\n  const [userNickname, setUserNickname] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userPassword, setUserPassword] = useState(\"\");\n  const [userConfirm, setUserConfirm] = useState(\"\"); // 에러 변수 추가\n\n  const [signUpClicked, setSignUpClicked] = useState(false);\n  const [signUpError, setSignUpError] = useState(null);\n  let signUpData = {\n    userNickname,\n    userEmail,\n    userPassword,\n    userConfirm\n  };\n  console.log(\"signUpData\", signUpData);\n\n  const postSignUp = async () => {\n    const response = await api.post(\"/login_process\", signUpData);\n    console.log(\"response\", response); // const data = await response.json();\n    // console.log(\"data\", data);\n  };\n\n  console.log(signUpClicked);\n  useEffect(() => {\n    try {\n      setSignUpError(null);\n      postSignUp();\n    } catch (err) {\n      setSignUpError(err);\n      console.log(\"SIGN-UP ERROR\", signUpError);\n    }\n  }, [signUpClicked]); // 회원가입 버튼을 처음 눌렀을 때만 포스트 요청이 보내지도록 설정 (useEffect, signUpClicked 이용)\n  // 회원가입이 성공적으로 이루어지면 signUpSuccess() 그렇지 않으면 signUpFailure() 실행\n\n  function signUpSuccess() {\n    return () => {\n      // signUpClicked가 초기화되도록 설정 (성공했을 때도 초기화되어야 하는지?)\n      setSignUpClicked(current => !current); // 회원가입 성공 메세지 띄우기\n\n      setSignUpModalOn(false);\n    };\n  }\n\n  function signUpFailure() {\n    return () => {\n      // 회원가입 실패 alert 창 또는 에러 메세지 띄우기\n      // signUpClicked 초기화\n      setSignUpClicked(current => !current); // 입력한 닉네임이 이미 존재하는 경우 \"이미 존재하는 닉네임입니다.\"\n      // 이미 존재하는 이메일인 경우 \"이미 존재하는 이메일입니다.\"\n      // 입력한 패스워드와 패스워드 확인이 다른 경우 \"입력하신 패스워드가 일치하지 않습니다.\"\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: onHide,\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          id: \"contained-modal-title-vcenter\",\n          children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"\\uB2C9\\uB124\\uC784\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"\\uC774\\uC7AC\\uC5F4\",\n              onChange: e => {\n                setUserNickname(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"\\uC774\\uBA54\\uC77C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"helloalien@jungle.com\",\n              onChange: e => {\n                setUserEmail(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"\\uD328\\uC2A4\\uC6CC\\uB4DC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"********\",\n              onChange: e => {\n                setUserPassword(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"\\uD328\\uC2A4\\uC6CC\\uB4DC \\uD655\\uC778\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"********\",\n              onChange: e => {\n                setUserConfirm(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"my-3\",\n            type: \"button\",\n            variant: \"success\",\n            style: {\n              width: \"100%\"\n            },\n            onClick: () => {\n              setSignUpClicked(true);\n              postSignUp();\n            },\n            children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignUpModal, \"GIq0wRjsBjOtU9g3dqjgDSEHSWo=\");\n\n_c = SignUpModal;\nexport default SignUpModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpModal\");","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/modals/SignUpModal.js"],"names":["React","useState","useEffect","Button","Container","Form","Modal","HorizonLine","api","SignUpModal","show","onHide","setSignUpModalOn","setLoginStatus","userNickname","setUserNickname","userEmail","setUserEmail","userPassword","setUserPassword","userConfirm","setUserConfirm","signUpClicked","setSignUpClicked","signUpError","setSignUpError","signUpData","console","log","postSignUp","response","post","err","signUpSuccess","current","signUpFailure","e","target","value","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Container, Form, Modal } from \"react-bootstrap\";\nimport HorizonLine from \"../components/HorizonLine.js\";\nimport * as api from \"../apis/index.js\";\n\nconst SignUpModal = ({ show, onHide, setSignUpModalOn, setLoginStatus }) => {\n  // const [showSignUp, setShowSignUp] = useState(true);\n  const [userNickname, setUserNickname] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userPassword, setUserPassword] = useState(\"\");\n  const [userConfirm, setUserConfirm] = useState(\"\");\n  // 에러 변수 추가\n  const [signUpClicked, setSignUpClicked] = useState(false);\n  const [signUpError, setSignUpError] = useState(null);\n\n  let signUpData = { userNickname, userEmail, userPassword, userConfirm };\n  console.log(\"signUpData\", signUpData);\n\n  const postSignUp = async () => {\n    const response = await api.post(\"/login_process\", signUpData);\n    console.log(\"response\", response);\n    // const data = await response.json();\n    // console.log(\"data\", data);\n  };\n\n  console.log(signUpClicked);\n\n  useEffect(() => {\n    try {\n      setSignUpError(null);\n      postSignUp();\n    } catch (err) {\n      setSignUpError(err);\n      console.log(\"SIGN-UP ERROR\", signUpError);\n    }\n  }, [signUpClicked]);\n\n  // 회원가입 버튼을 처음 눌렀을 때만 포스트 요청이 보내지도록 설정 (useEffect, signUpClicked 이용)\n  // 회원가입이 성공적으로 이루어지면 signUpSuccess() 그렇지 않으면 signUpFailure() 실행\n\n  function signUpSuccess() {\n    return () => {\n      // signUpClicked가 초기화되도록 설정 (성공했을 때도 초기화되어야 하는지?)\n      setSignUpClicked((current) => !current);\n      // 회원가입 성공 메세지 띄우기\n      setSignUpModalOn(false);\n    };\n  }\n\n  function signUpFailure() {\n    return () => {\n      // 회원가입 실패 alert 창 또는 에러 메세지 띄우기\n\n      // signUpClicked 초기화\n      setSignUpClicked((current) => !current);\n\n      // 입력한 닉네임이 이미 존재하는 경우 \"이미 존재하는 닉네임입니다.\"\n      // 이미 존재하는 이메일인 경우 \"이미 존재하는 이메일입니다.\"\n      // 입력한 패스워드와 패스워드 확인이 다른 경우 \"입력하신 패스워드가 일치하지 않습니다.\"\n    };\n  }\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Container>\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">회원가입</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group>\n              <Form.Label>닉네임</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"이재열\"\n                onChange={(e) => {\n                  setUserNickname(e.target.value);\n                }}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>이메일</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"helloalien@jungle.com\"\n                onChange={(e) => {\n                  setUserEmail(e.target.value);\n                }}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>패스워드</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"********\"\n                onChange={(e) => {\n                  setUserPassword(e.target.value);\n                }}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>패스워드 확인</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"********\"\n                onChange={(e) => {\n                  setUserConfirm(e.target.value);\n                }}\n              />\n            </Form.Group>\n            <Button\n              className=\"my-3\"\n              type=\"button\"\n              variant=\"success\"\n              style={{\n                width: \"100%\",\n              }}\n              onClick={() => {\n                setSignUpClicked(true);\n                postSignUp();\n              }}\n            >\n              회원가입\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Container>\n    </Modal>\n  );\n};\n\nexport default SignUpModal;\n"]},"metadata":{},"sourceType":"module"}