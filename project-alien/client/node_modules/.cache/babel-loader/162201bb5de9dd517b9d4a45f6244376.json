{"ast":null,"code":"var _jsxFileName = \"/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js\";\nimport React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\";\nimport * as socket from \"../../../apis/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Field extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.draw = (ctx, frameCnt, mouseObj) => {\n      // console.log(mouseObj);\n      let cvsWidth = ctx.canvas.width;\n      let cvsHeight = ctx.canvas.height;\n      ctx.save();\n      ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n      if (this.props.room && this.props.room.fieldState) {\n        const room = this.props.room;\n        const {\n          monsters\n        } = room.fieldState; // translate location\n\n        const {\n          center\n        } = room.camera;\n        ctx.translate(cvsWidth / 2 - center.x, cvsHeight / 2 - center.y); // room.camera.center.x++;\n        // draw background\n\n        ctx.fillStyle = `rgba(255, 255, 255, 1)`;\n        ctx.fillRect(0, 0, cvsWidth, cvsHeight); // draw monster\n        // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n\n        for (const userId in monsters) {\n          let {\n            location,\n            size,\n            color\n          } = monsters[userId];\n          let x = room.camera.getCanvasSize(location.x);\n          let y = room.camera.getCanvasSize(location.y);\n          size = room.camera.getCanvasSize(size);\n          ctx.beginPath();\n          ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n          ctx.fillStyle = color;\n          ctx.fill();\n        }\n\n        if (mouseObj.clicked) {// let destination = {\n          //   x: mouseObj.deltaXfromCenter,\n          //   y: mouseObj.deltaYfromCenter,\n          // };\n          // destination = room.camera.getLocalFromMouse(destination);\n          // socket.changeDestination(room.roomId, destination);\n        }\n      }\n\n      ctx.restore();\n    };\n  }\n\n  render() {\n    if (this.props.room) {\n      const camera = this.props.room.camera;\n      return /*#__PURE__*/_jsxDEV(Canvas, {\n        draw: this.draw,\n        onMouseDown: camera.onMouseDown,\n        onMouseMove: camera.onMouseMove,\n        onMouseUp: camera.onMouseUp,\n        onTouchStart: camera.onTouchStart,\n        onTouchMove: camera.onTouchMove,\n        onTouchEnd: camera.onTouchEnd,\n        onWheel: camera.onWheel,\n        onResize: camera.onResize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uB85C\\uB529\\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/shinhojung/git/raising-alien-creatures/client/src/pages/MultiAquarium/MultiField/index.js"],"names":["React","Component","Canvas","socket","Field","draw","ctx","frameCnt","mouseObj","cvsWidth","canvas","width","cvsHeight","height","save","clearRect","props","room","fieldState","monsters","center","camera","translate","x","y","fillStyle","fillRect","userId","location","size","color","getCanvasSize","beginPath","arc","Math","PI","fill","clicked","restore","render","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onWheel","onResize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Canvas from \"../../../components/Canvas\";\n\nimport * as socket from \"../../../apis/socket\";\n\nexport default class Field extends Component {\n  draw = (ctx, frameCnt, mouseObj) => {\n    // console.log(mouseObj);\n    let cvsWidth = ctx.canvas.width;\n    let cvsHeight = ctx.canvas.height;\n    ctx.save();\n    ctx.clearRect(0, 0, cvsWidth, cvsHeight);\n\n\n    if (this.props.room && this.props.room.fieldState) {\n      const room = this.props.room;\n      const { monsters } = room.fieldState;\n\n      // translate location\n      const { center } = room.camera;\n      ctx.translate(cvsWidth / 2 - center.x, cvsHeight / 2 - center.y);\n      // room.camera.center.x++;\n\n      // draw background\n      ctx.fillStyle = `rgba(255, 255, 255, 1)`;\n      ctx.fillRect(0, 0, cvsWidth, cvsHeight);\n\n      // draw monster\n      // TODO: monster들의 순서 (누가 위에 놓일 것인지 여부) 처리 필요\n      for (const userId in monsters) {\n        let { location, size, color } = monsters[userId];\n        let x = room.camera.getCanvasSize(location.x);\n        let y = room.camera.getCanvasSize(location.y);\n        size = room.camera.getCanvasSize(size);\n        ctx.beginPath();\n        ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.fill();\n      }\n\n      if (mouseObj.clicked) {\n        // let destination = {\n        //   x: mouseObj.deltaXfromCenter,\n        //   y: mouseObj.deltaYfromCenter,\n        // };\n        // destination = room.camera.getLocalFromMouse(destination);\n        // socket.changeDestination(room.roomId, destination);\n      }\n    }\n\n    ctx.restore();\n  };\n\n  render() {\n    if (this.props.room) {\n      const camera = this.props.room.camera;\n      return (\n        <Canvas\n          draw={this.draw}\n          onMouseDown={camera.onMouseDown}\n          onMouseMove={camera.onMouseMove}\n          onMouseUp={camera.onMouseUp}\n          onTouchStart={camera.onTouchStart}\n          onTouchMove={camera.onTouchMove}\n          onTouchEnd={camera.onTouchEnd}\n          onWheel={camera.onWheel}\n          onResize={camera.onResize}\n        />\n      );\n    } else {\n      return <div>로딩중...</div>;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}